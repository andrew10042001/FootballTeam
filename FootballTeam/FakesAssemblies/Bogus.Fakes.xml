<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bogus.Fakes</name>
    </assembly>
    <members>
        <member name="T:Bogus.Bson.Fakes.ShimBArray">
            <summary>Тип оболочки совместимости для Bogus.Bson.BArray</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.ShimBArray.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.ShimBArray.#ctor(Bogus.Bson.BArray)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.AddBValue">
            <summary>Задает оболочка совместимости BArray.Add(BValue v)</summary>
        </member>
        <member name="T:Bogus.Bson.Fakes.ShimBArray.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.AllInstances.AddBValue">
            <summary>Задает оболочка совместимости BArray.Add(BValue v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.AllInstances.Clear">
            <summary>Задает оболочка совместимости BArray.Clear()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.AllInstances.ContainsBValue">
            <summary>Задает оболочка совместимости BArray.Contains(BValue v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.AllInstances.CountGet">
            <summary>Задает оболочка совместимости BArray.get_Count()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.AllInstances.HasValuesGet">
            <summary>Задает оболочка совместимости BArray.get_HasValues()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.AllInstances.IndexOfBValue">
            <summary>Задает оболочка совместимости BArray.IndexOf(BValue item)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.AllInstances.InsertInt32BValue">
            <summary>Задает оболочка совместимости BArray.Insert(Int32 index, BValue item)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.AllInstances.ItemGetInt32">
            <summary>Задает оболочка совместимости BArray.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.AllInstances.ItemSetInt32BValue">
            <summary>Задает оболочка совместимости BArray.set_Item(Int32 index, BValue value)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.AllInstances.RemoveAtInt32">
            <summary>Задает оболочка совместимости BArray.RemoveAt(Int32 index)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.AllInstances.RemoveBValue">
            <summary>Задает оболочка совместимости BArray.Remove(BValue v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Задает оболочка совместимости BArray.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.ShimBArray.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.ShimBArray.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.ShimBArray.Bind(System.Collections.IEnumerable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.Clear">
            <summary>Задает оболочка совместимости BArray.Clear()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.Constructor">
            <summary>Задает оболочка совместимости BArray.BArray()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.ContainsBValue">
            <summary>Задает оболочка совместимости BArray.Contains(BValue v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.CountGet">
            <summary>Задает оболочка совместимости BArray.get_Count()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.HasValuesGet">
            <summary>Задает оболочка совместимости BArray.get_HasValues()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.IndexOfBValue">
            <summary>Задает оболочка совместимости BArray.IndexOf(BValue item)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.InsertInt32BValue">
            <summary>Задает оболочка совместимости BArray.Insert(Int32 index, BValue item)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.ItemGetInt32">
            <summary>Задает оболочка совместимости BArray.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.ItemSetInt32BValue">
            <summary>Задает оболочка совместимости BArray.set_Item(Int32 index, BValue value)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.RemoveAtInt32">
            <summary>Задает оболочка совместимости BArray.RemoveAt(Int32 index)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.RemoveBValue">
            <summary>Задает оболочка совместимости BArray.Remove(BValue v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBArray.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Задает оболочка совместимости BArray.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:Bogus.Bson.Fakes.ShimBObject">
            <summary>Тип оболочки совместимости для Bogus.Bson.BObject</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.ShimBObject.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.ShimBObject.#ctor(Bogus.Bson.BObject)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.AddStringBValue">
            <summary>Задает оболочка совместимости BObject.Add(String key, BValue value)</summary>
        </member>
        <member name="T:Bogus.Bson.Fakes.ShimBObject.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.AllInstances.AddStringBValue">
            <summary>Задает оболочка совместимости BObject.Add(String key, BValue value)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.AllInstances.Clear">
            <summary>Задает оболочка совместимости BObject.Clear()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.AllInstances.ContainsBValue">
            <summary>Задает оболочка совместимости BObject.Contains(BValue v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.AllInstances.ContainsKeyString">
            <summary>Задает оболочка совместимости BObject.ContainsKey(String key)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.AllInstances.CountGet">
            <summary>Задает оболочка совместимости BObject.get_Count()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.AllInstances.ItemGetString">
            <summary>Задает оболочка совместимости BObject.get_Item(String key)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.AllInstances.ItemSetStringBValue">
            <summary>Задает оболочка совместимости BObject.set_Item(String key, BValue value)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.AllInstances.KeysGet">
            <summary>Задает оболочка совместимости BObject.get_Keys()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.AllInstances.RemoveString">
            <summary>Задает оболочка совместимости BObject.Remove(String key)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Задает оболочка совместимости BObject.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.AllInstances.TryGetValueStringBValueOut">
            <summary>Задает оболочка совместимости BObject.TryGetValue(String key, BValue&amp; value)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.AllInstances.ValuesGet">
            <summary>Задает оболочка совместимости BObject.get_Values()</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.ShimBObject.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.ShimBObject.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.ShimBObject.Bind(System.Collections.IEnumerable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.Clear">
            <summary>Задает оболочка совместимости BObject.Clear()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.Constructor">
            <summary>Задает оболочка совместимости BObject.BObject()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.ContainsBValue">
            <summary>Задает оболочка совместимости BObject.Contains(BValue v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.ContainsKeyString">
            <summary>Задает оболочка совместимости BObject.ContainsKey(String key)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.CountGet">
            <summary>Задает оболочка совместимости BObject.get_Count()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.ItemGetString">
            <summary>Задает оболочка совместимости BObject.get_Item(String key)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.ItemSetStringBValue">
            <summary>Задает оболочка совместимости BObject.set_Item(String key, BValue value)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.KeysGet">
            <summary>Задает оболочка совместимости BObject.get_Keys()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.RemoveString">
            <summary>Задает оболочка совместимости BObject.Remove(String key)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Задает оболочка совместимости BObject.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.TryGetValueStringBValueOut">
            <summary>Задает оболочка совместимости BObject.TryGetValue(String key, BValue&amp; value)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBObject.ValuesGet">
            <summary>Задает оболочка совместимости BObject.get_Values()</summary>
        </member>
        <member name="T:Bogus.Bson.Fakes.ShimBValue">
            <summary>Тип оболочки совместимости для Bogus.Bson.BValue</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.ShimBValue.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.ShimBValue.#ctor(Bogus.Bson.BValue)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AddBValue">
            <summary>Задает оболочка совместимости BValue.Add(BValue value)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AddStringBValue">
            <summary>Задает оболочка совместимости BValue.Add(String key, BValue value)</summary>
        </member>
        <member name="T:Bogus.Bson.Fakes.ShimBValue.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AllInstances.AddBValue">
            <summary>Задает оболочка совместимости BValue.Add(BValue value)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AllInstances.AddStringBValue">
            <summary>Задает оболочка совместимости BValue.Add(String key, BValue value)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AllInstances.BinaryValueGet">
            <summary>Задает оболочка совместимости BValue.get_BinaryValue()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AllInstances.BoolValueGet">
            <summary>Задает оболочка совместимости BValue.get_BoolValue()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AllInstances.Clear">
            <summary>Задает оболочка совместимости BValue.Clear()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AllInstances.ContainsBValue">
            <summary>Задает оболочка совместимости BValue.Contains(BValue v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AllInstances.ContainsKeyString">
            <summary>Задает оболочка совместимости BValue.ContainsKey(String key)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AllInstances.DateTimeValueGet">
            <summary>Задает оболочка совместимости BValue.get_DateTimeValue()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AllInstances.DoubleValueGet">
            <summary>Задает оболочка совместимости BValue.get_DoubleValue()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AllInstances.Int32ValueGet">
            <summary>Задает оболочка совместимости BValue.get_Int32Value()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AllInstances.Int64ValueGet">
            <summary>Задает оболочка совместимости BValue.get_Int64Value()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AllInstances.IsNoneGet">
            <summary>Задает оболочка совместимости BValue.get_IsNone()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AllInstances.ItemGetInt32">
            <summary>Задает оболочка совместимости BValue.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AllInstances.ItemGetString">
            <summary>Задает оболочка совместимости BValue.get_Item(String key)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AllInstances.ItemSetInt32BValue">
            <summary>Задает оболочка совместимости BValue.set_Item(Int32 index, BValue value)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AllInstances.ItemSetStringBValue">
            <summary>Задает оболочка совместимости BValue.set_Item(String key, BValue value)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AllInstances.StringValueGet">
            <summary>Задает оболочка совместимости BValue.get_StringValue()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.AllInstances.ValueTypeGet">
            <summary>Задает оболочка совместимости BValue.get_ValueType()</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.ShimBValue.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.ShimBValue.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.BinaryValueGet">
            <summary>Задает оболочка совместимости BValue.get_BinaryValue()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.BoolValueGet">
            <summary>Задает оболочка совместимости BValue.get_BoolValue()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.Clear">
            <summary>Задает оболочка совместимости BValue.Clear()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.Constructor">
            <summary>Задает оболочка совместимости BValue.BValue()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ConstructorBValueType">
            <summary>Задает оболочка совместимости BValue.BValue(BValueType valueType)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ConstructorBoolean">
            <summary>Задает оболочка совместимости BValue.BValue(Boolean v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ConstructorByteArray">
            <summary>Задает оболочка совместимости BValue.BValue(Byte[] v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ConstructorDateTime">
            <summary>Задает оболочка совместимости BValue.BValue(DateTime dt)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ConstructorDouble">
            <summary>Задает оболочка совместимости BValue.BValue(Double v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ConstructorInt32">
            <summary>Задает оболочка совместимости BValue.BValue(Int32 v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ConstructorInt64">
            <summary>Задает оболочка совместимости BValue.BValue(Int64 v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ConstructorString">
            <summary>Задает оболочка совместимости BValue.BValue(String v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ContainsBValue">
            <summary>Задает оболочка совместимости BValue.Contains(BValue v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ContainsKeyString">
            <summary>Задает оболочка совместимости BValue.ContainsKey(String key)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.DateTimeValueGet">
            <summary>Задает оболочка совместимости BValue.get_DateTimeValue()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.DoubleValueGet">
            <summary>Задает оболочка совместимости BValue.get_DoubleValue()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.EqualityOpBValueObject">
            <summary>Задает оболочка совместимости BValue.op_Equality(BValue a, Object b)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ImplicitOpBValueByteArray">
            <summary>Задает оболочка совместимости BValue.op_Implicit(BValue v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ImplicitOpBValueDateTime">
            <summary>Задает оболочка совместимости BValue.op_Implicit(BValue v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ImplicitOpBValueDouble">
            <summary>Задает оболочка совместимости BValue.op_Implicit(BValue v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ImplicitOpBValueInt32">
            <summary>Задает оболочка совместимости BValue.op_Implicit(BValue v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ImplicitOpBValueInt64">
            <summary>Задает оболочка совместимости BValue.op_Implicit(BValue v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ImplicitOpBValueString">
            <summary>Задает оболочка совместимости BValue.op_Implicit(BValue v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ImplicitOpByteArrayBValue">
            <summary>Задает оболочка совместимости BValue.op_Implicit(Byte[] v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ImplicitOpDateTimeBValue">
            <summary>Задает оболочка совместимости BValue.op_Implicit(DateTime v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ImplicitOpDoubleBValue">
            <summary>Задает оболочка совместимости BValue.op_Implicit(Double v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ImplicitOpInt32BValue">
            <summary>Задает оболочка совместимости BValue.op_Implicit(Int32 v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ImplicitOpInt64BValue">
            <summary>Задает оболочка совместимости BValue.op_Implicit(Int64 v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ImplicitOpStringBValue">
            <summary>Задает оболочка совместимости BValue.op_Implicit(String v)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.InequalityOpBValueObject">
            <summary>Задает оболочка совместимости BValue.op_Inequality(BValue a, Object b)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.Int32ValueGet">
            <summary>Задает оболочка совместимости BValue.get_Int32Value()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.Int64ValueGet">
            <summary>Задает оболочка совместимости BValue.get_Int64Value()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.IsNoneGet">
            <summary>Задает оболочка совместимости BValue.get_IsNone()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ItemGetInt32">
            <summary>Задает оболочка совместимости BValue.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ItemGetString">
            <summary>Задает оболочка совместимости BValue.get_Item(String key)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ItemSetInt32BValue">
            <summary>Задает оболочка совместимости BValue.set_Item(Int32 index, BValue value)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ItemSetStringBValue">
            <summary>Задает оболочка совместимости BValue.set_Item(String key, BValue value)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.StringValueGet">
            <summary>Задает оболочка совместимости BValue.get_StringValue()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBValue.ValueTypeGet">
            <summary>Задает оболочка совместимости BValue.get_ValueType()</summary>
        </member>
        <member name="T:Bogus.Bson.Fakes.ShimBson">
            <summary>Тип оболочки совместимости для Bogus.Bson.Bson</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.ShimBson.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.ShimBson.#ctor(Bogus.Bson.Bson)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.Bson.Fakes.ShimBson.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBson.AllInstances.DecodeArray">
            <summary>Задает оболочка совместимости Bson.DecodeArray()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBson.AllInstances.DecodeCString">
            <summary>Задает оболочка совместимости Bson.DecodeCString()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBson.AllInstances.DecodeDocument">
            <summary>Задает оболочка совместимости Bson.DecodeDocument()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBson.AllInstances.DecodeElementStringOut">
            <summary>Задает оболочка совместимости Bson.DecodeElement(String&amp; name)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBson.AllInstances.DecodeString">
            <summary>Задает оболочка совместимости Bson.DecodeString()</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.ShimBson.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.ShimBson.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBson.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBson.ConstructorByteArray">
            <summary>Задает оболочка совместимости Bson.Bson(Byte[] buf)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBson.DecodeArray">
            <summary>Задает оболочка совместимости Bson.DecodeArray()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBson.DecodeCString">
            <summary>Задает оболочка совместимости Bson.DecodeCString()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBson.DecodeDocument">
            <summary>Задает оболочка совместимости Bson.DecodeDocument()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBson.DecodeElementStringOut">
            <summary>Задает оболочка совместимости Bson.DecodeElement(String&amp; name)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBson.DecodeString">
            <summary>Задает оболочка совместимости Bson.DecodeString()</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.ShimBson.LoadByteArray">
            <summary>Задает оболочка совместимости Bson.Load(Byte[] buf)</summary>
        </member>
        <member name="T:Bogus.Bson.Fakes.StubBArray">
            <summary>Тип заглушки Bogus.Bson.BArray</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBArray.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBArray.Add(Bogus.Bson.BValue)">
            <summary>Задает заглушка BArray.Add(BValue v)</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBArray.Add(System.String,Bogus.Bson.BValue)">
            <summary>Задает заглушка BValue.Add(String key, BValue value)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBArray.AddBValue">
            <summary>Задает stub BArray.Add(BValue v)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBArray.AddStringBValue">
            <summary>Задает stub BValue.Add(String key, BValue value)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.StubBArray.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBArray.Clear">
            <summary>Задает заглушка BArray.Clear()</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBArray.Clear01">
            <summary>Задает stub BArray.Clear()</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBArray.Contains(Bogus.Bson.BValue)">
            <summary>Задает заглушка BArray.Contains(BValue v)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBArray.ContainsBValue">
            <summary>Задает stub BArray.Contains(BValue v)</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBArray.ContainsKey(System.String)">
            <summary>Задает заглушка BValue.ContainsKey(String key)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBArray.ContainsKeyString">
            <summary>Задает stub BValue.ContainsKey(String key)</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBArray.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubBArray</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.StubBArray.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.StubBArray.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.StubBArray.Item(System.Int32)">
            <summary>Задает stub BArray.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.StubBArray.Item(System.String)">
            <summary>Задает stub BValue.get_Item(String key)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBArray.ItemGetInt32">
            <summary>Задает stub BArray.get_Item(Int32 index)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBArray.ItemGetString">
            <summary>Задает stub BValue.get_Item(String key)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBArray.ItemSetInt32BValue">
            <summary>Задает stub BArray.set_Item(Int32 index, BValue value)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBArray.ItemSetStringBValue">
            <summary>Задает stub BValue.set_Item(String key, BValue value)</summary>
        </member>
        <member name="T:Bogus.Bson.Fakes.StubBObject">
            <summary>Тип заглушки Bogus.Bson.BObject</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBObject.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBObject.Add(Bogus.Bson.BValue)">
            <summary>Задает заглушка BValue.Add(BValue value)</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBObject.Add(System.String,Bogus.Bson.BValue)">
            <summary>Задает заглушка BObject.Add(String key, BValue value)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBObject.AddBValue">
            <summary>Задает stub BValue.Add(BValue value)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBObject.AddStringBValue">
            <summary>Задает stub BObject.Add(String key, BValue value)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.StubBObject.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBObject.Clear">
            <summary>Задает заглушка BObject.Clear()</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBObject.Clear01">
            <summary>Задает stub BObject.Clear()</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBObject.Contains(Bogus.Bson.BValue)">
            <summary>Задает заглушка BObject.Contains(BValue v)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBObject.ContainsBValue">
            <summary>Задает stub BObject.Contains(BValue v)</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBObject.ContainsKey(System.String)">
            <summary>Задает заглушка BObject.ContainsKey(String key)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBObject.ContainsKeyString">
            <summary>Задает stub BObject.ContainsKey(String key)</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBObject.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubBObject</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.StubBObject.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.StubBObject.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.StubBObject.Item(System.Int32)">
            <summary>Задает stub BValue.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.StubBObject.Item(System.String)">
            <summary>Задает stub BObject.get_Item(String key)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBObject.ItemGetInt32">
            <summary>Задает stub BValue.get_Item(Int32 index)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBObject.ItemGetString">
            <summary>Задает stub BObject.get_Item(String key)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBObject.ItemSetInt32BValue">
            <summary>Задает stub BValue.set_Item(Int32 index, BValue value)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBObject.ItemSetStringBValue">
            <summary>Задает stub BObject.set_Item(String key, BValue value)</summary>
        </member>
        <member name="T:Bogus.Bson.Fakes.StubBValue">
            <summary>Тип заглушки Bogus.Bson.BValue</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBValue.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBValue.#ctor(Bogus.Bson.BValueType)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBValue.#ctor(System.Boolean)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBValue.#ctor(System.DateTime)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBValue.#ctor(System.Byte[])">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBValue.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBValue.#ctor(System.Double)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBValue.#ctor(System.Int32)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBValue.#ctor(System.Int64)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBValue.Add(Bogus.Bson.BValue)">
            <summary>Задает заглушка BValue.Add(BValue value)</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBValue.Add(System.String,Bogus.Bson.BValue)">
            <summary>Задает заглушка BValue.Add(String key, BValue value)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBValue.AddBValue">
            <summary>Задает stub BValue.Add(BValue value)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBValue.AddStringBValue">
            <summary>Задает stub BValue.Add(String key, BValue value)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.StubBValue.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBValue.Clear">
            <summary>Задает заглушка BValue.Clear()</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBValue.Clear01">
            <summary>Задает stub BValue.Clear()</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBValue.Contains(Bogus.Bson.BValue)">
            <summary>Задает заглушка BValue.Contains(BValue v)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBValue.ContainsBValue">
            <summary>Задает stub BValue.Contains(BValue v)</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBValue.ContainsKey(System.String)">
            <summary>Задает заглушка BValue.ContainsKey(String key)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBValue.ContainsKeyString">
            <summary>Задает stub BValue.ContainsKey(String key)</summary>
        </member>
        <member name="M:Bogus.Bson.Fakes.StubBValue.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubBValue</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.StubBValue.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.StubBValue.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.StubBValue.Item(System.Int32)">
            <summary>Задает stub BValue.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Bogus.Bson.Fakes.StubBValue.Item(System.String)">
            <summary>Задает stub BValue.get_Item(String key)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBValue.ItemGetInt32">
            <summary>Задает stub BValue.get_Item(Int32 index)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBValue.ItemGetString">
            <summary>Задает stub BValue.get_Item(String key)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBValue.ItemSetInt32BValue">
            <summary>Задает stub BValue.set_Item(Int32 index, BValue value)</summary>
        </member>
        <member name="F:Bogus.Bson.Fakes.StubBValue.ItemSetStringBValue">
            <summary>Задает stub BValue.set_Item(String key, BValue value)</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimAddress">
            <summary>Тип оболочки совместимости для Bogus.DataSets.Address</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimAddress.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimAddress.#ctor(Bogus.DataSets.Address)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimAddress.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.BuildingNumber">
            <summary>Задает оболочка совместимости Address.BuildingNumber()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.CardinalDirectionBoolean">
            <summary>Задает оболочка совместимости Address.CardinalDirection(Boolean useAbbreviation)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.City">
            <summary>Задает оболочка совместимости Address.City()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.CityPrefix">
            <summary>Задает оболочка совместимости Address.CityPrefix()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.CitySuffix">
            <summary>Задает оболочка совместимости Address.CitySuffix()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.Country">
            <summary>Задает оболочка совместимости Address.Country()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.CountryCode">
            <summary>Задает оболочка совместимости Address.CountryCode()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.County">
            <summary>Задает оболочка совместимости Address.County()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.DirectionBoolean">
            <summary>Задает оболочка совместимости Address.Direction(Boolean useAbbreviation)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.FullAddress">
            <summary>Задает оболочка совместимости Address.FullAddress()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.LatitudeDoubleDouble">
            <summary>Задает оболочка совместимости Address.Latitude(Double min, Double max)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.LongitudeDoubleDouble">
            <summary>Задает оболочка совместимости Address.Longitude(Double min, Double max)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.OrdinalDirectionBoolean">
            <summary>Задает оболочка совместимости Address.OrdinalDirection(Boolean useAbbreviation)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.SecondaryAddress">
            <summary>Задает оболочка совместимости Address.SecondaryAddress()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.State">
            <summary>Задает оболочка совместимости Address.State()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.StateAbbr">
            <summary>Задает оболочка совместимости Address.StateAbbr()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.StreetAddressBoolean">
            <summary>Задает оболочка совместимости Address.StreetAddress(Boolean useFullAddress)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.StreetName">
            <summary>Задает оболочка совместимости Address.StreetName()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.StreetSuffix">
            <summary>Задает оболочка совместимости Address.StreetSuffix()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.AllInstances.ZipCodeString">
            <summary>Задает оболочка совместимости Address.ZipCode(String format)</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimAddress.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimAddress.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimAddress.Bind(Bogus.ILocaleAware)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.BuildingNumber">
            <summary>Задает оболочка совместимости Address.BuildingNumber()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.CardinalDirectionBoolean">
            <summary>Задает оболочка совместимости Address.CardinalDirection(Boolean useAbbreviation)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.City">
            <summary>Задает оболочка совместимости Address.City()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.CityPrefix">
            <summary>Задает оболочка совместимости Address.CityPrefix()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.CitySuffix">
            <summary>Задает оболочка совместимости Address.CitySuffix()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.ConstructorString">
            <summary>Задает оболочка совместимости Address.Address(String locale)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.Country">
            <summary>Задает оболочка совместимости Address.Country()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.CountryCode">
            <summary>Задает оболочка совместимости Address.CountryCode()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.County">
            <summary>Задает оболочка совместимости Address.County()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.DirectionBoolean">
            <summary>Задает оболочка совместимости Address.Direction(Boolean useAbbreviation)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.FullAddress">
            <summary>Задает оболочка совместимости Address.FullAddress()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.LatitudeDoubleDouble">
            <summary>Задает оболочка совместимости Address.Latitude(Double min, Double max)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.LongitudeDoubleDouble">
            <summary>Задает оболочка совместимости Address.Longitude(Double min, Double max)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.OrdinalDirectionBoolean">
            <summary>Задает оболочка совместимости Address.OrdinalDirection(Boolean useAbbreviation)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.SecondaryAddress">
            <summary>Задает оболочка совместимости Address.SecondaryAddress()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.State">
            <summary>Задает оболочка совместимости Address.State()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.StateAbbr">
            <summary>Задает оболочка совместимости Address.StateAbbr()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.StreetAddressBoolean">
            <summary>Задает оболочка совместимости Address.StreetAddress(Boolean useFullAddress)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.StreetName">
            <summary>Задает оболочка совместимости Address.StreetName()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.StreetSuffix">
            <summary>Задает оболочка совместимости Address.StreetSuffix()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimAddress.ZipCodeString">
            <summary>Задает оболочка совместимости Address.ZipCode(String format)</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimCardType">
            <summary>Тип оболочки совместимости для Bogus.DataSets.CardType</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimCardType.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimCardType.#ctor(Bogus.DataSets.CardType)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimCardType.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCardType.AllInstances.ValueGet">
            <summary>Задает оболочка совместимости CardType.get_Value()</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimCardType.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimCardType.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCardType.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCardType.ConstructorString">
            <summary>Задает оболочка совместимости CardType.CardType(String value)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCardType.StaticConstructor">
            <summary>Задает оболочка совместимости CardType.CardType()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCardType.ValueGet">
            <summary>Задает оболочка совместимости CardType.get_Value()</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimCommerce">
            <summary>Тип оболочки совместимости для Bogus.DataSets.Commerce</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimCommerce.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimCommerce.#ctor(Bogus.DataSets.Commerce)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimCommerce.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCommerce.AllInstances.CategoriesInt32">
            <summary>Задает оболочка совместимости Commerce.Categories(Int32 num)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCommerce.AllInstances.Color">
            <summary>Задает оболочка совместимости Commerce.Color()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCommerce.AllInstances.DepartmentInt32Boolean">
            <summary>Задает оболочка совместимости Commerce.Department(Int32 max, Boolean returnMax)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCommerce.AllInstances.PriceDecimalDecimalInt32String">
            <summary>Задает оболочка совместимости Commerce.Price(Decimal min, Decimal max, Int32 decimals, String symbol)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCommerce.AllInstances.Product">
            <summary>Задает оболочка совместимости Commerce.Product()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCommerce.AllInstances.ProductAdjective">
            <summary>Задает оболочка совместимости Commerce.ProductAdjective()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCommerce.AllInstances.ProductMaterial">
            <summary>Задает оболочка совместимости Commerce.ProductMaterial()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCommerce.AllInstances.ProductName">
            <summary>Задает оболочка совместимости Commerce.ProductName()</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimCommerce.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimCommerce.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCommerce.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimCommerce.Bind(Bogus.ILocaleAware)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCommerce.CategoriesInt32">
            <summary>Задает оболочка совместимости Commerce.Categories(Int32 num)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCommerce.Color">
            <summary>Задает оболочка совместимости Commerce.Color()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCommerce.ConstructorString">
            <summary>Задает оболочка совместимости Commerce.Commerce(String locale)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCommerce.DepartmentInt32Boolean">
            <summary>Задает оболочка совместимости Commerce.Department(Int32 max, Boolean returnMax)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCommerce.PriceDecimalDecimalInt32String">
            <summary>Задает оболочка совместимости Commerce.Price(Decimal min, Decimal max, Int32 decimals, String symbol)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCommerce.Product">
            <summary>Задает оболочка совместимости Commerce.Product()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCommerce.ProductAdjective">
            <summary>Задает оболочка совместимости Commerce.ProductAdjective()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCommerce.ProductMaterial">
            <summary>Задает оболочка совместимости Commerce.ProductMaterial()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCommerce.ProductName">
            <summary>Задает оболочка совместимости Commerce.ProductName()</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimCompany">
            <summary>Тип оболочки совместимости для Bogus.DataSets.Company</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimCompany.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimCompany.#ctor(Bogus.DataSets.Company)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimCompany.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.AllInstances.Bs">
            <summary>Задает оболочка совместимости Company.Bs()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.AllInstances.BsAdjective">
            <summary>Задает оболочка совместимости Company.BsAdjective()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.AllInstances.BsBuzz">
            <summary>Задает оболочка совместимости Company.BsBuzz()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.AllInstances.BsNoun">
            <summary>Задает оболочка совместимости Company.BsNoun()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.AllInstances.CatchPhrase">
            <summary>Задает оболочка совместимости Company.CatchPhrase()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.AllInstances.CatchPhraseAdjective">
            <summary>Задает оболочка совместимости Company.CatchPhraseAdjective()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.AllInstances.CatchPhraseDescriptor">
            <summary>Задает оболочка совместимости Company.CatchPhraseDescriptor()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.AllInstances.CatchPhraseNoun">
            <summary>Задает оболочка совместимости Company.CatchPhraseNoun()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.AllInstances.CompanyNameNullableOfInt32">
            <summary>Задает оболочка совместимости Company.CompanyName(Nullable`1&lt;Int32&gt; formatIndex)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.AllInstances.CompanyNameString">
            <summary>Задает оболочка совместимости Company.CompanyName(String format)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.AllInstances.CompanySuffix">
            <summary>Задает оболочка совместимости Company.CompanySuffix()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.AllInstances.Suffexes">
            <summary>Задает оболочка совместимости Company.Suffexes()</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimCompany.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimCompany.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimCompany.Bind(Bogus.ILocaleAware)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.Bs">
            <summary>Задает оболочка совместимости Company.Bs()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.BsAdjective">
            <summary>Задает оболочка совместимости Company.BsAdjective()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.BsBuzz">
            <summary>Задает оболочка совместимости Company.BsBuzz()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.BsNoun">
            <summary>Задает оболочка совместимости Company.BsNoun()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.CatchPhrase">
            <summary>Задает оболочка совместимости Company.CatchPhrase()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.CatchPhraseAdjective">
            <summary>Задает оболочка совместимости Company.CatchPhraseAdjective()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.CatchPhraseDescriptor">
            <summary>Задает оболочка совместимости Company.CatchPhraseDescriptor()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.CatchPhraseNoun">
            <summary>Задает оболочка совместимости Company.CatchPhraseNoun()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.CompanyNameNullableOfInt32">
            <summary>Задает оболочка совместимости Company.CompanyName(Nullable`1&lt;Int32&gt; formatIndex)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.CompanyNameString">
            <summary>Задает оболочка совместимости Company.CompanyName(String format)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.CompanySuffix">
            <summary>Задает оболочка совместимости Company.CompanySuffix()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.ConstructorString">
            <summary>Задает оболочка совместимости Company.Company(String locale)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCompany.Suffexes">
            <summary>Задает оболочка совместимости Company.Suffexes()</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimCurrency">
            <summary>Тип оболочки совместимости для Bogus.DataSets.Currency</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimCurrency.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimCurrency.#ctor(Bogus.DataSets.Currency)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimCurrency.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCurrency.AllInstances.CodeGet">
            <summary>Задает оболочка совместимости Currency.get_Code()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCurrency.AllInstances.CodeSetString">
            <summary>Задает оболочка совместимости Currency.set_Code(String value)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCurrency.AllInstances.DescriptionGet">
            <summary>Задает оболочка совместимости Currency.get_Description()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCurrency.AllInstances.DescriptionSetString">
            <summary>Задает оболочка совместимости Currency.set_Description(String value)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCurrency.AllInstances.SymbolGet">
            <summary>Задает оболочка совместимости Currency.get_Symbol()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCurrency.AllInstances.SymbolSetString">
            <summary>Задает оболочка совместимости Currency.set_Symbol(String value)</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimCurrency.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimCurrency.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCurrency.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCurrency.CodeGet">
            <summary>Задает оболочка совместимости Currency.get_Code()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCurrency.CodeSetString">
            <summary>Задает оболочка совместимости Currency.set_Code(String value)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCurrency.Constructor">
            <summary>Задает оболочка совместимости Currency.Currency()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCurrency.DescriptionGet">
            <summary>Задает оболочка совместимости Currency.get_Description()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCurrency.DescriptionSetString">
            <summary>Задает оболочка совместимости Currency.set_Description(String value)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCurrency.StaticConstructor">
            <summary>Задает оболочка совместимости Currency.Currency()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCurrency.SymbolGet">
            <summary>Задает оболочка совместимости Currency.get_Symbol()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimCurrency.SymbolSetString">
            <summary>Задает оболочка совместимости Currency.set_Symbol(String value)</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimDatabase">
            <summary>Тип оболочки совместимости для Bogus.DataSets.Database</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimDatabase.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimDatabase.#ctor(Bogus.DataSets.Database)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimDatabase.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDatabase.AllInstances.Collation">
            <summary>Задает оболочка совместимости Database.Collation()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDatabase.AllInstances.Column">
            <summary>Задает оболочка совместимости Database.Column()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDatabase.AllInstances.Engine">
            <summary>Задает оболочка совместимости Database.Engine()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDatabase.AllInstances.Type">
            <summary>Задает оболочка совместимости Database.Type()</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimDatabase.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimDatabase.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDatabase.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimDatabase.Bind(Bogus.ILocaleAware)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDatabase.Collation">
            <summary>Задает оболочка совместимости Database.Collation()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDatabase.Column">
            <summary>Задает оболочка совместимости Database.Column()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDatabase.Constructor">
            <summary>Задает оболочка совместимости Database.Database()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDatabase.Engine">
            <summary>Задает оболочка совместимости Database.Engine()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDatabase.Type">
            <summary>Задает оболочка совместимости Database.Type()</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimDate">
            <summary>Тип оболочки совместимости для Bogus.DataSets.Date</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimDate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimDate.#ctor(Bogus.DataSets.Date)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimDate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDate.AllInstances.BetweenDateTimeDateTime">
            <summary>Задает оболочка совместимости Date.Between(DateTime start, DateTime end)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDate.AllInstances.FutureInt32NullableOfDateTime">
            <summary>Задает оболочка совместимости Date.Future(Int32 yearsToGoForward, Nullable`1&lt;DateTime&gt; refDate)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDate.AllInstances.MonthBooleanBoolean">
            <summary>Задает оболочка совместимости Date.Month(Boolean abbrivation, Boolean useContext)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDate.AllInstances.PastInt32NullableOfDateTime">
            <summary>Задает оболочка совместимости Date.Past(Int32 yearsToGoBack, Nullable`1&lt;DateTime&gt; refDate)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDate.AllInstances.RecentInt32">
            <summary>Задает оболочка совместимости Date.Recent(Int32 days)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDate.AllInstances.SoonInt32">
            <summary>Задает оболочка совместимости Date.Soon(Int32 days)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDate.AllInstances.TimespanNullableOfTimeSpan">
            <summary>Задает оболочка совместимости Date.Timespan(Nullable`1&lt;TimeSpan&gt; maxSpan)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDate.AllInstances.WeekdayBooleanBoolean">
            <summary>Задает оболочка совместимости Date.Weekday(Boolean abbrivation, Boolean useContext)</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimDate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimDate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDate.BetweenDateTimeDateTime">
            <summary>Задает оболочка совместимости Date.Between(DateTime start, DateTime end)</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimDate.Bind(Bogus.ILocaleAware)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDate.ConstructorString">
            <summary>Задает оболочка совместимости Date.Date(String locale)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDate.FutureInt32NullableOfDateTime">
            <summary>Задает оболочка совместимости Date.Future(Int32 yearsToGoForward, Nullable`1&lt;DateTime&gt; refDate)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDate.MonthBooleanBoolean">
            <summary>Задает оболочка совместимости Date.Month(Boolean abbrivation, Boolean useContext)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDate.PastInt32NullableOfDateTime">
            <summary>Задает оболочка совместимости Date.Past(Int32 yearsToGoBack, Nullable`1&lt;DateTime&gt; refDate)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDate.RecentInt32">
            <summary>Задает оболочка совместимости Date.Recent(Int32 days)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDate.SoonInt32">
            <summary>Задает оболочка совместимости Date.Soon(Int32 days)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDate.TimespanNullableOfTimeSpan">
            <summary>Задает оболочка совместимости Date.Timespan(Nullable`1&lt;TimeSpan&gt; maxSpan)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimDate.WeekdayBooleanBoolean">
            <summary>Задает оболочка совместимости Date.Weekday(Boolean abbrivation, Boolean useContext)</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimFinance">
            <summary>Тип оболочки совместимости для Bogus.DataSets.Finance</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimFinance.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimFinance.#ctor(Bogus.DataSets.Finance)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.AccountInt32">
            <summary>Задает оболочка совместимости Finance.Account(Int32 length)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.AccountName">
            <summary>Задает оболочка совместимости Finance.AccountName()</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimFinance.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.AllInstances.AccountInt32">
            <summary>Задает оболочка совместимости Finance.Account(Int32 length)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.AllInstances.AccountName">
            <summary>Задает оболочка совместимости Finance.AccountName()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.AllInstances.AmountDecimalDecimalInt32">
            <summary>Задает оболочка совместимости Finance.Amount(Decimal min, Decimal max, Int32 decimals)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.AllInstances.Bic">
            <summary>Задает оболочка совместимости Finance.Bic()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.AllInstances.BitcoinAddress">
            <summary>Задает оболочка совместимости Finance.BitcoinAddress()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.AllInstances.CreditCardCvv">
            <summary>Задает оболочка совместимости Finance.CreditCardCvv()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.AllInstances.CreditCardNumberCardType">
            <summary>Задает оболочка совместимости Finance.CreditCardNumber(CardType provider)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.AllInstances.CurrencyBoolean">
            <summary>Задает оболочка совместимости Finance.Currency(Boolean includeFundCodes)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.AllInstances.EthereumAddress">
            <summary>Задает оболочка совместимости Finance.EthereumAddress()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.AllInstances.IbanBoolean">
            <summary>Задает оболочка совместимости Finance.Iban(Boolean formatted)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.AllInstances.IbanMod97String">
            <summary>Задает оболочка совместимости Finance.IbanMod97(String digitStr)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.AllInstances.IbanToDigitStringString">
            <summary>Задает оболочка совместимости Finance.IbanToDigitString(String str)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.AllInstances.RoutingNumber">
            <summary>Задает оболочка совместимости Finance.RoutingNumber()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.AllInstances.TransactionType">
            <summary>Задает оболочка совместимости Finance.TransactionType()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.AllInstances._CreditCardNumberg__RegexStyleStringParse5_1String">
            <summary>Задает оболочка совместимости Finance.&lt;CreditCardNumber&gt;g__RegexStyleStringParse5_1(String str)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.AmountDecimalDecimalInt32">
            <summary>Задает оболочка совместимости Finance.Amount(Decimal min, Decimal max, Int32 decimals)</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimFinance.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimFinance.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.Bic">
            <summary>Задает оболочка совместимости Finance.Bic()</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimFinance.Bind(Bogus.ILocaleAware)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.BitcoinAddress">
            <summary>Задает оболочка совместимости Finance.BitcoinAddress()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.Constructor">
            <summary>Задает оболочка совместимости Finance.Finance()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.CreditCardCvv">
            <summary>Задает оболочка совместимости Finance.CreditCardCvv()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.CreditCardNumberCardType">
            <summary>Задает оболочка совместимости Finance.CreditCardNumber(CardType provider)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.CurrencyBoolean">
            <summary>Задает оболочка совместимости Finance.Currency(Boolean includeFundCodes)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.EthereumAddress">
            <summary>Задает оболочка совместимости Finance.EthereumAddress()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.IbanBoolean">
            <summary>Задает оболочка совместимости Finance.Iban(Boolean formatted)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.IbanMod97String">
            <summary>Задает оболочка совместимости Finance.IbanMod97(String digitStr)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.IbanToDigitStringString">
            <summary>Задает оболочка совместимости Finance.IbanToDigitString(String str)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.RoutingNumber">
            <summary>Задает оболочка совместимости Finance.RoutingNumber()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.StaticConstructor">
            <summary>Задает оболочка совместимости Finance.Finance()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance.TransactionType">
            <summary>Задает оболочка совместимости Finance.TransactionType()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimFinance._CreditCardNumberg__RegexStyleStringParse5_1String">
            <summary>Задает оболочка совместимости Finance.&lt;CreditCardNumber&gt;g__RegexStyleStringParse5_1(String str)</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimHacker">
            <summary>Тип оболочки совместимости для Bogus.DataSets.Hacker</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimHacker.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimHacker.#ctor(Bogus.DataSets.Hacker)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimHacker.Abbreviation">
            <summary>Задает оболочка совместимости Hacker.Abbreviation()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimHacker.Adjective">
            <summary>Задает оболочка совместимости Hacker.Adjective()</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimHacker.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimHacker.AllInstances.Abbreviation">
            <summary>Задает оболочка совместимости Hacker.Abbreviation()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimHacker.AllInstances.Adjective">
            <summary>Задает оболочка совместимости Hacker.Adjective()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimHacker.AllInstances.IngVerb">
            <summary>Задает оболочка совместимости Hacker.IngVerb()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimHacker.AllInstances.Noun">
            <summary>Задает оболочка совместимости Hacker.Noun()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimHacker.AllInstances.Phrase">
            <summary>Задает оболочка совместимости Hacker.Phrase()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimHacker.AllInstances.Verb">
            <summary>Задает оболочка совместимости Hacker.Verb()</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimHacker.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimHacker.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimHacker.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimHacker.Bind(Bogus.ILocaleAware)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimHacker.ConstructorString">
            <summary>Задает оболочка совместимости Hacker.Hacker(String locale)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimHacker.IngVerb">
            <summary>Задает оболочка совместимости Hacker.IngVerb()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimHacker.Noun">
            <summary>Задает оболочка совместимости Hacker.Noun()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimHacker.Phrase">
            <summary>Задает оболочка совместимости Hacker.Phrase()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimHacker.Verb">
            <summary>Задает оболочка совместимости Hacker.Verb()</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimImages">
            <summary>Тип оболочки совместимости для Bogus.DataSets.Images</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimImages.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimImages.#ctor(Bogus.DataSets.Images)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.AbstractInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Abstract(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimImages.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.AllInstances.AbstractInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Abstract(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.AllInstances.AnimalsInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Animals(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.AllInstances.BusinessInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Business(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.AllInstances.CatsInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Cats(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.AllInstances.CityInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.City(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.AllInstances.DataUriInt32Int32">
            <summary>Задает оболочка совместимости Images.DataUri(Int32 width, Int32 height)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.AllInstances.FashionInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Fashion(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.AllInstances.FoodInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Food(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.AllInstances.ImageInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Image(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.AllInstances.ImageUrlStringInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.ImageUrl(String category, Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.AllInstances.NatureInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Nature(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.AllInstances.NightlifeInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Nightlife(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.AllInstances.PeopleInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.People(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.AllInstances.SportsInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Sports(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.AllInstances.TechnicsInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Technics(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.AllInstances.TransportInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Transport(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.AnimalsInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Animals(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimImages.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimImages.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimImages.Bind(Bogus.ILocaleAware)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.BusinessInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Business(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.CatsInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Cats(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.CityInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.City(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.ConstructorString">
            <summary>Задает оболочка совместимости Images.Images(String locale)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.DataUriInt32Int32">
            <summary>Задает оболочка совместимости Images.DataUri(Int32 width, Int32 height)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.FashionInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Fashion(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.FoodInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Food(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.ImageInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Image(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.ImageUrlStringInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.ImageUrl(String category, Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.NatureInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Nature(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.NightlifeInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Nightlife(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.PeopleInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.People(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.SportsInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Sports(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.TechnicsInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Technics(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimImages.TransportInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости Images.Transport(Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimInternet">
            <summary>Тип оболочки совместимости для Bogus.DataSets.Internet</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimInternet.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimInternet.#ctor(Bogus.DataSets.Internet)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimInternet.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances.Avatar">
            <summary>Задает оболочка совместимости Internet.Avatar()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances.ColorByteByteByte">
            <summary>Задает оболочка совместимости Internet.Color(Byte baseRed, Byte baseGreen, Byte baseBlue)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances.DomainName">
            <summary>Задает оболочка совместимости Internet.DomainName()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances.DomainSuffix">
            <summary>Задает оболочка совместимости Internet.DomainSuffix()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances.DomainWord">
            <summary>Задает оболочка совместимости Internet.DomainWord()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances.EmailStringStringString">
            <summary>Задает оболочка совместимости Internet.Email(String firstName, String lastName, String provider)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances.ExampleEmailStringString">
            <summary>Задает оболочка совместимости Internet.ExampleEmail(String firstName, String lastName)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances.Ip">
            <summary>Задает оболочка совместимости Internet.Ip()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances.Ipv6">
            <summary>Задает оболочка совместимости Internet.Ipv6()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances.MacString">
            <summary>Задает оболочка совместимости Internet.Mac(String separator)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances.PasswordInt32BooleanStringString">
            <summary>Задает оболочка совместимости Internet.Password(Int32 length, Boolean memorable, String regexPattern, String prefix)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances.Protocol">
            <summary>Задает оболочка совместимости Internet.Protocol()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances.Url">
            <summary>Задает оболочка совместимости Internet.Url()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances.UrlStringString">
            <summary>Задает оболочка совместимости Internet.Url(String protocol, String domain)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances.UrlWithPathStringString">
            <summary>Задает оболочка совместимости Internet.UrlWithPath(String protocol, String domain)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances.UserAgent">
            <summary>Задает оболочка совместимости Internet.UserAgent()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances.UserNameStringString">
            <summary>Задает оболочка совместимости Internet.UserName(String firstName, String lastName)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances._Macb__13_0Int32">
            <summary>Задает оболочка совместимости Internet.&lt;Mac&gt;b__13_0(Int32 s)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.AllInstances._ctorb__1_0">
            <summary>Задает оболочка совместимости Internet.&lt;.ctor&gt;b__1_0()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.Avatar">
            <summary>Задает оболочка совместимости Internet.Avatar()</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimInternet.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimInternet.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimInternet.Bind(Bogus.ILocaleAware)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.ColorByteByteByte">
            <summary>Задает оболочка совместимости Internet.Color(Byte baseRed, Byte baseGreen, Byte baseBlue)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.ConstructorString">
            <summary>Задает оболочка совместимости Internet.Internet(String locale)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.DomainName">
            <summary>Задает оболочка совместимости Internet.DomainName()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.DomainSuffix">
            <summary>Задает оболочка совместимости Internet.DomainSuffix()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.DomainWord">
            <summary>Задает оболочка совместимости Internet.DomainWord()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.EmailStringStringString">
            <summary>Задает оболочка совместимости Internet.Email(String firstName, String lastName, String provider)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.ExampleEmailStringString">
            <summary>Задает оболочка совместимости Internet.ExampleEmail(String firstName, String lastName)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.Ip">
            <summary>Задает оболочка совместимости Internet.Ip()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.Ipv6">
            <summary>Задает оболочка совместимости Internet.Ipv6()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.MacString">
            <summary>Задает оболочка совместимости Internet.Mac(String separator)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.PasswordInt32BooleanStringString">
            <summary>Задает оболочка совместимости Internet.Password(Int32 length, Boolean memorable, String regexPattern, String prefix)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.Protocol">
            <summary>Задает оболочка совместимости Internet.Protocol()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.Url">
            <summary>Задает оболочка совместимости Internet.Url()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.UrlStringString">
            <summary>Задает оболочка совместимости Internet.Url(String protocol, String domain)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.UrlWithPathStringString">
            <summary>Задает оболочка совместимости Internet.UrlWithPath(String protocol, String domain)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.UserAgent">
            <summary>Задает оболочка совместимости Internet.UserAgent()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet.UserNameStringString">
            <summary>Задает оболочка совместимости Internet.UserName(String firstName, String lastName)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet._Macb__13_0Int32">
            <summary>Задает оболочка совместимости Internet.&lt;Mac&gt;b__13_0(Int32 s)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimInternet._ctorb__1_0">
            <summary>Задает оболочка совместимости Internet.&lt;.ctor&gt;b__1_0()</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimLorem">
            <summary>Тип оболочки совместимости для Bogus.DataSets.Lorem</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimLorem.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimLorem.#ctor(Bogus.DataSets.Lorem)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimLorem.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.AllInstances.LetterInt32">
            <summary>Задает оболочка совместимости Lorem.Letter(Int32 num)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.AllInstances.LinesNullableOfInt32String">
            <summary>Задает оболочка совместимости Lorem.Lines(Nullable`1&lt;Int32&gt; lineCount, String seperator)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.AllInstances.ParagraphInt32">
            <summary>Задает оболочка совместимости Lorem.Paragraph(Int32 count)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.AllInstances.ParagraphsInt32String">
            <summary>Задает оболочка совместимости Lorem.Paragraphs(Int32 count, String separator)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.AllInstances.SentenceNullableOfInt32NullableOfInt32">
            <summary>Задает оболочка совместимости Lorem.Sentence(Nullable`1&lt;Int32&gt; wordCount, Nullable`1&lt;Int32&gt; range)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.AllInstances.SentencesNullableOfInt32String">
            <summary>Задает оболочка совместимости Lorem.Sentences(Nullable`1&lt;Int32&gt; sentenceCount, String separator)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.AllInstances.SlugInt32">
            <summary>Задает оболочка совместимости Lorem.Slug(Int32 wordcount)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.AllInstances.Text">
            <summary>Задает оболочка совместимости Lorem.Text()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.AllInstances.Word">
            <summary>Задает оболочка совместимости Lorem.Word()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.AllInstances.WordsInt32">
            <summary>Задает оболочка совместимости Lorem.Words(Int32 num)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.AllInstances._Paragraphsb__8_0Int32">
            <summary>Задает оболочка совместимости Lorem.&lt;Paragraphs&gt;b__8_0(Int32 i)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.AllInstances._Sentencesb__6_0Int32">
            <summary>Задает оболочка совместимости Lorem.&lt;Sentences&gt;b__6_0(Int32 s)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.AllInstances._Textb__9_0">
            <summary>Задает оболочка совместимости Lorem.&lt;Text&gt;b__9_0()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.AllInstances._Textb__9_1">
            <summary>Задает оболочка совместимости Lorem.&lt;Text&gt;b__9_1()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.AllInstances._Textb__9_2">
            <summary>Задает оболочка совместимости Lorem.&lt;Text&gt;b__9_2()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.AllInstances._Textb__9_3">
            <summary>Задает оболочка совместимости Lorem.&lt;Text&gt;b__9_3()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.AllInstances._Wordsb__2_0Int32">
            <summary>Задает оболочка совместимости Lorem.&lt;Words&gt;b__2_0(Int32 f)</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimLorem.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimLorem.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimLorem.Bind(Bogus.ILocaleAware)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.ConstructorString">
            <summary>Задает оболочка совместимости Lorem.Lorem(String locale)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.LetterInt32">
            <summary>Задает оболочка совместимости Lorem.Letter(Int32 num)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.LinesNullableOfInt32String">
            <summary>Задает оболочка совместимости Lorem.Lines(Nullable`1&lt;Int32&gt; lineCount, String seperator)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.ParagraphInt32">
            <summary>Задает оболочка совместимости Lorem.Paragraph(Int32 count)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.ParagraphsInt32String">
            <summary>Задает оболочка совместимости Lorem.Paragraphs(Int32 count, String separator)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.SentenceNullableOfInt32NullableOfInt32">
            <summary>Задает оболочка совместимости Lorem.Sentence(Nullable`1&lt;Int32&gt; wordCount, Nullable`1&lt;Int32&gt; range)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.SentencesNullableOfInt32String">
            <summary>Задает оболочка совместимости Lorem.Sentences(Nullable`1&lt;Int32&gt; sentenceCount, String separator)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.SlugInt32">
            <summary>Задает оболочка совместимости Lorem.Slug(Int32 wordcount)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.Text">
            <summary>Задает оболочка совместимости Lorem.Text()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.Word">
            <summary>Задает оболочка совместимости Lorem.Word()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem.WordsInt32">
            <summary>Задает оболочка совместимости Lorem.Words(Int32 num)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem._Paragraphsb__8_0Int32">
            <summary>Задает оболочка совместимости Lorem.&lt;Paragraphs&gt;b__8_0(Int32 i)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem._Sentencesb__6_0Int32">
            <summary>Задает оболочка совместимости Lorem.&lt;Sentences&gt;b__6_0(Int32 s)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem._Textb__9_0">
            <summary>Задает оболочка совместимости Lorem.&lt;Text&gt;b__9_0()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem._Textb__9_1">
            <summary>Задает оболочка совместимости Lorem.&lt;Text&gt;b__9_1()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem._Textb__9_2">
            <summary>Задает оболочка совместимости Lorem.&lt;Text&gt;b__9_2()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem._Textb__9_3">
            <summary>Задает оболочка совместимости Lorem.&lt;Text&gt;b__9_3()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimLorem._Wordsb__2_0Int32">
            <summary>Задает оболочка совместимости Lorem.&lt;Words&gt;b__2_0(Int32 f)</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimName">
            <summary>Тип оболочки совместимости для Bogus.DataSets.Name</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimName.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimName.#ctor(Bogus.DataSets.Name)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimName.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.AllInstances.FindNameStringStringNullableOfBooleanNullableOfBooleanNullableOfNameGender">
            <summary>Задает оболочка совместимости Name.FindName(String firstName, String lastName, Nullable`1&lt;Boolean&gt; withPrefix, Nullable`1&lt;Boolean&gt; withSuffix, Nullable`1&lt;Gender&gt; gender)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.AllInstances.FirstNameNullableOfNameGender">
            <summary>Задает оболочка совместимости Name.FirstName(Nullable`1&lt;Gender&gt; gender)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.AllInstances.FullNameNullableOfNameGender">
            <summary>Задает оболочка совместимости Name.FullName(Nullable`1&lt;Gender&gt; gender)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.AllInstances.ItemGetString">
            <summary>Задает оболочка совместимости Name.get_Item(String switchLocale)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.AllInstances.JobArea">
            <summary>Задает оболочка совместимости Name.JobArea()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.AllInstances.JobDescriptor">
            <summary>Задает оболочка совместимости Name.JobDescriptor()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.AllInstances.JobTitle">
            <summary>Задает оболочка совместимости Name.JobTitle()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.AllInstances.JobType">
            <summary>Задает оболочка совместимости Name.JobType()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.AllInstances.LastNameNullableOfNameGender">
            <summary>Задает оболочка совместимости Name.LastName(Nullable`1&lt;Gender&gt; gender)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.AllInstances.PrefixNullableOfNameGender">
            <summary>Задает оболочка совместимости Name.Prefix(Nullable`1&lt;Gender&gt; gender)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.AllInstances.Suffix">
            <summary>Задает оболочка совместимости Name.Suffix()</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimName.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimName.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimName.Bind(Bogus.ILocaleAware)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.ConstructorString">
            <summary>Задает оболочка совместимости Name.Name(String locale)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.FindNameStringStringNullableOfBooleanNullableOfBooleanNullableOfNameGender">
            <summary>Задает оболочка совместимости Name.FindName(String firstName, String lastName, Nullable`1&lt;Boolean&gt; withPrefix, Nullable`1&lt;Boolean&gt; withSuffix, Nullable`1&lt;Gender&gt; gender)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.FirstNameNullableOfNameGender">
            <summary>Задает оболочка совместимости Name.FirstName(Nullable`1&lt;Gender&gt; gender)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.FullNameNullableOfNameGender">
            <summary>Задает оболочка совместимости Name.FullName(Nullable`1&lt;Gender&gt; gender)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.ItemGetString">
            <summary>Задает оболочка совместимости Name.get_Item(String switchLocale)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.JobArea">
            <summary>Задает оболочка совместимости Name.JobArea()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.JobDescriptor">
            <summary>Задает оболочка совместимости Name.JobDescriptor()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.JobTitle">
            <summary>Задает оболочка совместимости Name.JobTitle()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.JobType">
            <summary>Задает оболочка совместимости Name.JobType()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.LastNameNullableOfNameGender">
            <summary>Задает оболочка совместимости Name.LastName(Nullable`1&lt;Gender&gt; gender)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.PrefixNullableOfNameGender">
            <summary>Задает оболочка совместимости Name.Prefix(Nullable`1&lt;Gender&gt; gender)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimName.Suffix">
            <summary>Задает оболочка совместимости Name.Suffix()</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimPhoneNumbers">
            <summary>Тип оболочки совместимости для Bogus.DataSets.PhoneNumbers</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimPhoneNumbers.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimPhoneNumbers.#ctor(Bogus.DataSets.PhoneNumbers)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimPhoneNumbers.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimPhoneNumbers.AllInstances.PhoneFormat">
            <summary>Задает оболочка совместимости PhoneNumbers.PhoneFormat()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimPhoneNumbers.AllInstances.PhoneNumberFormatInt32">
            <summary>Задает оболочка совместимости PhoneNumbers.PhoneNumberFormat(Int32 phoneFormatsArrayIndex)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimPhoneNumbers.AllInstances.PhoneNumberString">
            <summary>Задает оболочка совместимости PhoneNumbers.PhoneNumber(String format)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimPhoneNumbers.AllInstances.ReplaceExclamCharString">
            <summary>Задает оболочка совместимости PhoneNumbers.ReplaceExclamChar(String s)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimPhoneNumbers.AllInstances._ReplaceExclamCharb__4_0">
            <summary>Задает оболочка совместимости PhoneNumbers.&lt;ReplaceExclamChar&gt;b__4_0()</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimPhoneNumbers.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimPhoneNumbers.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimPhoneNumbers.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimPhoneNumbers.Bind(Bogus.ILocaleAware)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimPhoneNumbers.ConstructorString">
            <summary>Задает оболочка совместимости PhoneNumbers.PhoneNumbers(String locale)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimPhoneNumbers.PhoneFormat">
            <summary>Задает оболочка совместимости PhoneNumbers.PhoneFormat()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimPhoneNumbers.PhoneNumberFormatInt32">
            <summary>Задает оболочка совместимости PhoneNumbers.PhoneNumberFormat(Int32 phoneFormatsArrayIndex)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimPhoneNumbers.PhoneNumberString">
            <summary>Задает оболочка совместимости PhoneNumbers.PhoneNumber(String format)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimPhoneNumbers.ReplaceExclamCharString">
            <summary>Задает оболочка совместимости PhoneNumbers.ReplaceExclamChar(String s)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimPhoneNumbers._ReplaceExclamCharb__4_0">
            <summary>Задает оболочка совместимости PhoneNumbers.&lt;ReplaceExclamChar&gt;b__4_0()</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimRant">
            <summary>Тип оболочки совместимости для Bogus.DataSets.Rant</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimRant.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimRant.#ctor(Bogus.DataSets.Rant)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimRant.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimRant.AllInstances.ReviewString">
            <summary>Задает оболочка совместимости Rant.Review(String product)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimRant.AllInstances.ReviewsStringInt32">
            <summary>Задает оболочка совместимости Rant.Reviews(String product, Int32 lines)</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimRant.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimRant.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimRant.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimRant.Bind(Bogus.ILocaleAware)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimRant.Constructor">
            <summary>Задает оболочка совместимости Rant.Rant()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimRant.ReviewString">
            <summary>Задает оболочка совместимости Rant.Review(String product)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimRant.ReviewsStringInt32">
            <summary>Задает оболочка совместимости Rant.Reviews(String product, Int32 lines)</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimSystem">
            <summary>Тип оболочки совместимости для Bogus.DataSets.System</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimSystem.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimSystem.#ctor(Bogus.DataSets.System)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.ShimSystem.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.AllInstances.CommonFileExt">
            <summary>Задает оболочка совместимости System.CommonFileExt()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.AllInstances.CommonFileNameString">
            <summary>Задает оболочка совместимости System.CommonFileName(String ext)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.AllInstances.CommonFileType">
            <summary>Задает оболочка совместимости System.CommonFileType()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.AllInstances.DirectoryPath">
            <summary>Задает оболочка совместимости System.DirectoryPath()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.AllInstances.Exception">
            <summary>Задает оболочка совместимости System.Exception()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.AllInstances.FileExtString">
            <summary>Задает оболочка совместимости System.FileExt(String mimeType)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.AllInstances.FileNameString">
            <summary>Задает оболочка совместимости System.FileName(String ext)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.AllInstances.FilePath">
            <summary>Задает оболочка совместимости System.FilePath()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.AllInstances.FileType">
            <summary>Задает оболочка совместимости System.FileType()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.AllInstances.MimeType">
            <summary>Задает оболочка совместимости System.MimeType()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.AllInstances.Semver">
            <summary>Задает оболочка совместимости System.Semver()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.AllInstances.Version">
            <summary>Задает оболочка совместимости System.Version()</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimSystem.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimSystem.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.ShimSystem.Bind(Bogus.ILocaleAware)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.CommonFileExt">
            <summary>Задает оболочка совместимости System.CommonFileExt()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.CommonFileNameString">
            <summary>Задает оболочка совместимости System.CommonFileName(String ext)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.CommonFileType">
            <summary>Задает оболочка совместимости System.CommonFileType()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.ConstructorString">
            <summary>Задает оболочка совместимости System.System(String locale)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.DirectoryPath">
            <summary>Задает оболочка совместимости System.DirectoryPath()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.Exception">
            <summary>Задает оболочка совместимости System.Exception()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.FileExtString">
            <summary>Задает оболочка совместимости System.FileExt(String mimeType)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.FileNameString">
            <summary>Задает оболочка совместимости System.FileName(String ext)</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.FilePath">
            <summary>Задает оболочка совместимости System.FilePath()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.FileType">
            <summary>Задает оболочка совместимости System.FileType()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.MimeType">
            <summary>Задает оболочка совместимости System.MimeType()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.Semver">
            <summary>Задает оболочка совместимости System.Semver()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.ShimSystem.Version">
            <summary>Задает оболочка совместимости System.Version()</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.StubAddress">
            <summary>Тип заглушки Bogus.DataSets.Address</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubAddress.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubAddress.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubAddress.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubAddress</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubAddress.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubAddress.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.StubCommerce">
            <summary>Тип заглушки Bogus.DataSets.Commerce</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubCommerce.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubCommerce.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubCommerce.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubCommerce</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubCommerce.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubCommerce.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.StubCompany">
            <summary>Тип заглушки Bogus.DataSets.Company</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubCompany.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubCompany.BsAdjective">
            <summary>Задает заглушка Company.BsAdjective()</summary>
        </member>
        <member name="F:Bogus.DataSets.Fakes.StubCompany.BsAdjective01">
            <summary>Задает stub Company.BsAdjective()</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubCompany.BsBuzz">
            <summary>Задает заглушка Company.BsBuzz()</summary>
        </member>
        <member name="F:Bogus.DataSets.Fakes.StubCompany.BsBuzz01">
            <summary>Задает stub Company.BsBuzz()</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubCompany.BsNoun">
            <summary>Задает заглушка Company.BsNoun()</summary>
        </member>
        <member name="F:Bogus.DataSets.Fakes.StubCompany.BsNoun01">
            <summary>Задает stub Company.BsNoun()</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubCompany.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubCompany.CatchPhraseAdjective">
            <summary>Задает заглушка Company.CatchPhraseAdjective()</summary>
        </member>
        <member name="F:Bogus.DataSets.Fakes.StubCompany.CatchPhraseAdjective01">
            <summary>Задает stub Company.CatchPhraseAdjective()</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubCompany.CatchPhraseDescriptor">
            <summary>Задает заглушка Company.CatchPhraseDescriptor()</summary>
        </member>
        <member name="F:Bogus.DataSets.Fakes.StubCompany.CatchPhraseDescriptor01">
            <summary>Задает stub Company.CatchPhraseDescriptor()</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubCompany.CatchPhraseNoun">
            <summary>Задает заглушка Company.CatchPhraseNoun()</summary>
        </member>
        <member name="F:Bogus.DataSets.Fakes.StubCompany.CatchPhraseNoun01">
            <summary>Задает stub Company.CatchPhraseNoun()</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubCompany.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubCompany</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubCompany.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubCompany.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubCompany.Suffexes">
            <summary>Задает заглушка Company.Suffexes()</summary>
        </member>
        <member name="F:Bogus.DataSets.Fakes.StubCompany.Suffexes01">
            <summary>Задает stub Company.Suffexes()</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.StubCurrency">
            <summary>Тип заглушки Bogus.DataSets.Currency</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubCurrency.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubCurrency.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubCurrency.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubCurrency</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubCurrency.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubCurrency.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.StubDatabase">
            <summary>Тип заглушки Bogus.DataSets.Database</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubDatabase.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubDatabase.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubDatabase.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDatabase</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubDatabase.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubDatabase.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.StubDate">
            <summary>Тип заглушки Bogus.DataSets.Date</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubDate.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubDate.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubDate.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDate</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubDate.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubDate.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.StubFinance">
            <summary>Тип заглушки Bogus.DataSets.Finance</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubFinance.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubFinance.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubFinance.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubFinance</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubFinance.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubFinance.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.StubHacker">
            <summary>Тип заглушки Bogus.DataSets.Hacker</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubHacker.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubHacker.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubHacker.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubHacker</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubHacker.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubHacker.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.StubImages">
            <summary>Тип заглушки Bogus.DataSets.Images</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubImages.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubImages.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubImages.ImageUrl(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Задает заглушка Images.ImageUrl(String category, Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="F:Bogus.DataSets.Fakes.StubImages.ImageUrlStringInt32Int32BooleanBoolean">
            <summary>Задает stub Images.ImageUrl(String category, Int32 width, Int32 height, Boolean randomize, Boolean https)</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubImages.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubImages</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubImages.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubImages.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.StubInternet">
            <summary>Тип заглушки Bogus.DataSets.Internet</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubInternet.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubInternet.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubInternet.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubInternet</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubInternet.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubInternet.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.StubLorem">
            <summary>Тип заглушки Bogus.DataSets.Lorem</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubLorem.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubLorem.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubLorem.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubLorem</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubLorem.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubLorem.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.StubName">
            <summary>Тип заглушки Bogus.DataSets.Name</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubName.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubName.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubName.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubName</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubName.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubName.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.StubPhoneNumbers">
            <summary>Тип заглушки Bogus.DataSets.PhoneNumbers</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubPhoneNumbers.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubPhoneNumbers.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubPhoneNumbers.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubPhoneNumbers</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubPhoneNumbers.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubPhoneNumbers.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubPhoneNumbers.PhoneFormat">
            <summary>Задает заглушка PhoneNumbers.PhoneFormat()</summary>
        </member>
        <member name="F:Bogus.DataSets.Fakes.StubPhoneNumbers.PhoneFormat01">
            <summary>Задает stub PhoneNumbers.PhoneFormat()</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubPhoneNumbers.ReplaceExclamChar(System.String)">
            <summary>Задает заглушка PhoneNumbers.ReplaceExclamChar(String s)</summary>
        </member>
        <member name="F:Bogus.DataSets.Fakes.StubPhoneNumbers.ReplaceExclamCharString">
            <summary>Задает stub PhoneNumbers.ReplaceExclamChar(String s)</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.StubRant">
            <summary>Тип заглушки Bogus.DataSets.Rant</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubRant.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubRant.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubRant.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubRant</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubRant.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubRant.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.DataSets.Fakes.StubSystem">
            <summary>Тип заглушки Bogus.DataSets.System</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubSystem.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubSystem.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.DataSets.Fakes.StubSystem.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubSystem</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubSystem.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.DataSets.Fakes.StubSystem.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.Extensions.Brazil.Fakes.ShimExtensionsForBrazil">
            <summary>Тип оболочки совместимости для Bogus.Extensions.Brazil.ExtensionsForBrazil</summary>
        </member>
        <member name="M:Bogus.Extensions.Brazil.Fakes.ShimExtensionsForBrazil.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Extensions.Brazil.Fakes.ShimExtensionsForBrazil.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Extensions.Brazil.Fakes.ShimExtensionsForBrazil.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Extensions.Brazil.Fakes.ShimExtensionsForBrazil.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Extensions.Brazil.Fakes.ShimExtensionsForBrazil.CnpjCompany">
            <summary>Задает оболочка совместимости ExtensionsForBrazil.Cnpj(Company c)</summary>
        </member>
        <member name="P:Bogus.Extensions.Brazil.Fakes.ShimExtensionsForBrazil.CpfPerson">
            <summary>Задает оболочка совместимости ExtensionsForBrazil.Cpf(Person p)</summary>
        </member>
        <member name="P:Bogus.Extensions.Brazil.Fakes.ShimExtensionsForBrazil.StaticConstructor">
            <summary>Задает оболочка совместимости ExtensionsForBrazil.ExtensionsForBrazil()</summary>
        </member>
        <member name="T:Bogus.Extensions.Canada.Fakes.ShimExtensionsForCanada">
            <summary>Тип оболочки совместимости для Bogus.Extensions.Canada.ExtensionsForCanada</summary>
        </member>
        <member name="M:Bogus.Extensions.Canada.Fakes.ShimExtensionsForCanada.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Extensions.Canada.Fakes.ShimExtensionsForCanada.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Extensions.Canada.Fakes.ShimExtensionsForCanada.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Extensions.Canada.Fakes.ShimExtensionsForCanada.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Extensions.Canada.Fakes.ShimExtensionsForCanada.SinPerson">
            <summary>Задает оболочка совместимости ExtensionsForCanada.Sin(Person p)</summary>
        </member>
        <member name="P:Bogus.Extensions.Canada.Fakes.ShimExtensionsForCanada.StaticConstructor">
            <summary>Задает оболочка совместимости ExtensionsForCanada.ExtensionsForCanada()</summary>
        </member>
        <member name="T:Bogus.Extensions.Denmark.Fakes.ShimExtensionsForDenmark">
            <summary>Тип оболочки совместимости для Bogus.Extensions.Denmark.ExtensionsForDenmark</summary>
        </member>
        <member name="M:Bogus.Extensions.Denmark.Fakes.ShimExtensionsForDenmark.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Extensions.Denmark.Fakes.ShimExtensionsForDenmark.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Extensions.Denmark.Fakes.ShimExtensionsForDenmark.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Extensions.Denmark.Fakes.ShimExtensionsForDenmark.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Extensions.Denmark.Fakes.ShimExtensionsForDenmark.CprPerson">
            <summary>Задает оболочка совместимости ExtensionsForDenmark.Cpr(Person p)</summary>
        </member>
        <member name="T:Bogus.Extensions.Fakes.ShimExtensionsForString">
            <summary>Тип оболочки совместимости для Bogus.Extensions.ExtensionsForString</summary>
        </member>
        <member name="M:Bogus.Extensions.Fakes.ShimExtensionsForString.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Extensions.Fakes.ShimExtensionsForString.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Extensions.Fakes.ShimExtensionsForString.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Extensions.Fakes.ShimExtensionsForString.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Extensions.Fakes.ShimExtensionsForString.ClampLengthStringNullableOfInt32NullableOfInt32">
            <summary>Задает оболочка совместимости ExtensionsForString.ClampLength(String str, Nullable`1&lt;Int32&gt; min, Nullable`1&lt;Int32&gt; max)</summary>
        </member>
        <member name="P:Bogus.Extensions.Fakes.ShimExtensionsForString.RemoveDiacriticsString">
            <summary>Задает оболочка совместимости ExtensionsForString.RemoveDiacritics(String this)</summary>
        </member>
        <member name="P:Bogus.Extensions.Fakes.ShimExtensionsForString.StaticConstructor">
            <summary>Задает оболочка совместимости ExtensionsForString.ExtensionsForString()</summary>
        </member>
        <member name="T:Bogus.Extensions.Finland.Fakes.ShimExtensionsForFinland">
            <summary>Тип оболочки совместимости для Bogus.Extensions.Finland.ExtensionsForFinland</summary>
        </member>
        <member name="M:Bogus.Extensions.Finland.Fakes.ShimExtensionsForFinland.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Extensions.Finland.Fakes.ShimExtensionsForFinland.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Extensions.Finland.Fakes.ShimExtensionsForFinland.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Extensions.Finland.Fakes.ShimExtensionsForFinland.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Extensions.Finland.Fakes.ShimExtensionsForFinland.HenkilötunnusPerson">
            <summary>Задает оболочка совместимости ExtensionsForFinland.Henkilötunnus(Person p)</summary>
        </member>
        <member name="T:Bogus.Extensions.UnitedKingdom.Fakes.ShimExtensionsForUnitedKingdom">
            <summary>Тип оболочки совместимости для Bogus.Extensions.UnitedKingdom.ExtensionsForUnitedKingdom</summary>
        </member>
        <member name="M:Bogus.Extensions.UnitedKingdom.Fakes.ShimExtensionsForUnitedKingdom.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Extensions.UnitedKingdom.Fakes.ShimExtensionsForUnitedKingdom.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Extensions.UnitedKingdom.Fakes.ShimExtensionsForUnitedKingdom.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Extensions.UnitedKingdom.Fakes.ShimExtensionsForUnitedKingdom.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Extensions.UnitedKingdom.Fakes.ShimExtensionsForUnitedKingdom.ShortCodeFinanceBoolean">
            <summary>Задает оболочка совместимости ExtensionsForUnitedKingdom.ShortCode(Finance finance, Boolean includeSeperator)</summary>
        </member>
        <member name="P:Bogus.Extensions.UnitedKingdom.Fakes.ShimExtensionsForUnitedKingdom.StaticConstructor">
            <summary>Задает оболочка совместимости ExtensionsForUnitedKingdom.ExtensionsForUnitedKingdom()</summary>
        </member>
        <member name="T:Bogus.Extensions.UnitedStates.Fakes.ShimExtensionsForUnitedStates">
            <summary>Тип оболочки совместимости для Bogus.Extensions.UnitedStates.ExtensionsForUnitedStates</summary>
        </member>
        <member name="M:Bogus.Extensions.UnitedStates.Fakes.ShimExtensionsForUnitedStates.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Extensions.UnitedStates.Fakes.ShimExtensionsForUnitedStates.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Extensions.UnitedStates.Fakes.ShimExtensionsForUnitedStates.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Extensions.UnitedStates.Fakes.ShimExtensionsForUnitedStates.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Extensions.UnitedStates.Fakes.ShimExtensionsForUnitedStates.SsnPerson">
            <summary>Задает оболочка совместимости ExtensionsForUnitedStates.Ssn(Person p)</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimBinder">
            <summary>Тип оболочки совместимости для Bogus.Binder</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimBinder.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimBinder.#ctor(Bogus.Binder)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimBinder.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimBinder.AllInstances.GetMembersType">
            <summary>Задает оболочка совместимости Binder.GetMembers(Type t)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimBinder.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimBinder.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimBinder.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimBinder.Bind(Bogus.IBinder)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimBinder.Constructor">
            <summary>Задает оболочка совместимости Binder.Binder()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimBinder.ConstructorBindingFlags">
            <summary>Задает оболочка совместимости Binder.Binder(BindingFlags bindingFlags)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimBinder.GetMembersType">
            <summary>Задает оболочка совместимости Binder.GetMembers(Type t)</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimDataCategoryAttribute">
            <summary>Тип оболочки совместимости для Bogus.DataCategoryAttribute</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimDataCategoryAttribute.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimDataCategoryAttribute.#ctor(Bogus.DataCategoryAttribute)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimDataCategoryAttribute.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataCategoryAttribute.AllInstances.NameGet">
            <summary>Задает оболочка совместимости DataCategoryAttribute.get_Name()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataCategoryAttribute.AllInstances.NameSetString">
            <summary>Задает оболочка совместимости DataCategoryAttribute.set_Name(String value)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimDataCategoryAttribute.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimDataCategoryAttribute.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataCategoryAttribute.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataCategoryAttribute.ConstructorString">
            <summary>Задает оболочка совместимости DataCategoryAttribute.DataCategoryAttribute(String name)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataCategoryAttribute.NameGet">
            <summary>Задает оболочка совместимости DataCategoryAttribute.get_Name()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataCategoryAttribute.NameSetString">
            <summary>Задает оболочка совместимости DataCategoryAttribute.set_Name(String value)</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimDataSet">
            <summary>Тип оболочки совместимости для Bogus.DataSet</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimDataSet.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimDataSet.#ctor(Bogus.DataSet)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimDataSet.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.AllInstances.CategoryGet">
            <summary>Задает оболочка совместимости DataSet.get_Category()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.AllInstances.CategorySetString">
            <summary>Задает оболочка совместимости DataSet.set_Category(String value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.AllInstances.GetArrayString">
            <summary>Задает оболочка совместимости DataSet.GetArray(String path)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.AllInstances.GetFormattedValueString">
            <summary>Задает оболочка совместимости DataSet.GetFormattedValue(String path)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.AllInstances.GetObjectString">
            <summary>Задает оболочка совместимости DataSet.GetObject(String path)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.AllInstances.GetRandomArrayItemStringNullableOfInt32NullableOfInt32">
            <summary>Задает оболочка совместимости DataSet.GetRandomArrayItem(String path, Nullable`1&lt;Int32&gt; min, Nullable`1&lt;Int32&gt; max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.AllInstances.GetString">
            <summary>Задает оболочка совместимости DataSet.Get(String path)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.AllInstances.HasKeyStringBoolean">
            <summary>Задает оболочка совместимости DataSet.HasKey(String path, Boolean includeFallback)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.AllInstances.LocaleGet">
            <summary>Задает оболочка совместимости DataSet.get_Locale()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.AllInstances.LocaleSetString">
            <summary>Задает оболочка совместимости DataSet.set_Locale(String value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.AllInstances.ParseTokensString">
            <summary>Задает оболочка совместимости DataSet.ParseTokens(String value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.AllInstances.RandomGet">
            <summary>Задает оболочка совместимости DataSet.get_Random()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.AllInstances.RandomSetRandomizer">
            <summary>Задает оболочка совместимости DataSet.set_Random(Randomizer value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.AllInstances._ParseTokensb__20_0Match">
            <summary>Задает оболочка совместимости DataSet.&lt;ParseTokens&gt;b__20_0(Match x)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimDataSet.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimDataSet.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimDataSet.Bind(Bogus.ILocaleAware)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.CategoryGet">
            <summary>Задает оболочка совместимости DataSet.get_Category()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.CategorySetString">
            <summary>Задает оболочка совместимости DataSet.set_Category(String value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.ConstructorString">
            <summary>Задает оболочка совместимости DataSet.DataSet(String locale)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.GetArrayString">
            <summary>Задает оболочка совместимости DataSet.GetArray(String path)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.GetFormattedValueString">
            <summary>Задает оболочка совместимости DataSet.GetFormattedValue(String path)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.GetObjectString">
            <summary>Задает оболочка совместимости DataSet.GetObject(String path)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.GetRandomArrayItemStringNullableOfInt32NullableOfInt32">
            <summary>Задает оболочка совместимости DataSet.GetRandomArrayItem(String path, Nullable`1&lt;Int32&gt; min, Nullable`1&lt;Int32&gt; max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.GetString">
            <summary>Задает оболочка совместимости DataSet.Get(String path)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.HasKeyStringBoolean">
            <summary>Задает оболочка совместимости DataSet.HasKey(String path, Boolean includeFallback)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.LocaleGet">
            <summary>Задает оболочка совместимости DataSet.get_Locale()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.LocaleSetString">
            <summary>Задает оболочка совместимости DataSet.set_Locale(String value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.ParseTokensString">
            <summary>Задает оболочка совместимости DataSet.ParseTokens(String value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.RandomGet">
            <summary>Задает оболочка совместимости DataSet.get_Random()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.RandomSetRandomizer">
            <summary>Задает оболочка совместимости DataSet.set_Random(Randomizer value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet.ResolveCategoryType">
            <summary>Задает оболочка совместимости DataSet.ResolveCategory(Type type)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDataSet._ParseTokensb__20_0Match">
            <summary>Задает оболочка совместимости DataSet.&lt;ParseTokens&gt;b__20_0(Match x)</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimDatabase">
            <summary>Тип оболочки совместимости для Bogus.Database</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimDatabase.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimDatabase.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimDatabase.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDatabase.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDatabase.GetAllLocales">
            <summary>Задает оболочка совместимости Database.GetAllLocales()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDatabase.GetLocaleString">
            <summary>Задает оболочка совместимости Database.GetLocale(String locale)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDatabase.GetStringStringStringString">
            <summary>Задает оболочка совместимости Database.Get(String category, String path, String locale, String localeFallback)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDatabase.HasKeyStringStringStringString">
            <summary>Задает оболочка совместимости Database.HasKey(String category, String path, String locale, String fallbackLocale)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDatabase.InitLocaleString">
            <summary>Задает оболочка совместимости Database.InitLocale(String locale)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDatabase.Initialize">
            <summary>Задает оболочка совместимости Database.Initialize()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDatabase.SelectStringStringBValue">
            <summary>Задает оболочка совместимости Database.Select(String category, String path, BValue localeRoot)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimDatabase.StaticConstructor">
            <summary>Задает оболочка совместимости Database.Database()</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimFaker">
            <summary>Тип оболочки совместимости для Bogus.Faker</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.#ctor(Bogus.Faker)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AddressGet">
            <summary>Задает оболочка совместимости Faker.get_Address()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AddressSetAddress">
            <summary>Задает оболочка совместимости Faker.set_Address(Address value)</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimFaker.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.AddressGet">
            <summary>Задает оболочка совместимости Faker.get_Address()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.AddressSetAddress">
            <summary>Задает оболочка совместимости Faker.set_Address(Address value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.CommerceGet">
            <summary>Задает оболочка совместимости Faker.get_Commerce()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.CommerceSetCommerce">
            <summary>Задает оболочка совместимости Faker.set_Commerce(Commerce value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.CompanyGet">
            <summary>Задает оболочка совместимости Faker.get_Company()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.CompanySetCompany">
            <summary>Задает оболочка совместимости Faker.set_Company(Company value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.DatabaseGet">
            <summary>Задает оболочка совместимости Faker.get_Database()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.DatabaseSetDatabase">
            <summary>Задает оболочка совместимости Faker.set_Database(Database value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.DateGet">
            <summary>Задает оболочка совместимости Faker.get_Date()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.DateSetDate">
            <summary>Задает оболочка совместимости Faker.set_Date(Date value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.FinanceGet">
            <summary>Задает оболочка совместимости Faker.get_Finance()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.FinanceSetFinance">
            <summary>Задает оболочка совместимости Faker.set_Finance(Finance value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.HackerGet">
            <summary>Задает оболочка совместимости Faker.get_Hacker()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.HackerSetHacker">
            <summary>Задает оболочка совместимости Faker.set_Hacker(Hacker value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.HashidsGet">
            <summary>Задает оболочка совместимости Faker.get_Hashids()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.HashidsSetHashids">
            <summary>Задает оболочка совместимости Faker.set_Hashids(Hashids value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.ImageGet">
            <summary>Задает оболочка совместимости Faker.get_Image()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.ImageSetImages">
            <summary>Задает оболочка совместимости Faker.set_Image(Images value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.IndexGlobalGet">
            <summary>Задает оболочка совместимости Faker.get_IndexGlobal()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.InternetGet">
            <summary>Задает оболочка совместимости Faker.get_Internet()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.InternetSetInternet">
            <summary>Задает оболочка совместимости Faker.set_Internet(Internet value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.LocaleGet">
            <summary>Задает оболочка совместимости Faker.get_Locale()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.LocaleSetString">
            <summary>Задает оболочка совместимости Faker.set_Locale(String value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.LoremGet">
            <summary>Задает оболочка совместимости Faker.get_Lorem()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.LoremSetLorem">
            <summary>Задает оболочка совместимости Faker.set_Lorem(Lorem value)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.AllInstances.MakeLazyOf1Int32FuncOfInt32M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Faker,System.Int32,System.Func{System.Int32,``0},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Задает оболочка совместимости Faker.MakeLazy(Int32 count, Func`2&lt;Int32,!!0&gt; action)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.AllInstances.MakeLazyOf1Int32FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Faker,System.Int32,System.Func{``0},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Задает оболочка совместимости Faker.MakeLazy(Int32 count, Func`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.AllInstances.MakeOf1Int32FuncOfInt32M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Faker,System.Int32,System.Func{System.Int32,``0},System.Collections.Generic.IList{``0}})">
            <summary>Задает оболочка совместимости Faker.Make(Int32 count, Func`2&lt;Int32,!!0&gt; action)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.AllInstances.MakeOf1Int32FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Faker,System.Int32,System.Func{``0},System.Collections.Generic.IList{``0}})">
            <summary>Задает оболочка совместимости Faker.Make(Int32 count, Func`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.NameGet">
            <summary>Задает оболочка совместимости Faker.get_Name()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.NameSetName">
            <summary>Задает оболочка совместимости Faker.set_Name(Name value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.NewContext">
            <summary>Задает оболочка совместимости Faker.NewContext()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.ParseString">
            <summary>Задает оболочка совместимости Faker.Parse(String str)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.PersonGet">
            <summary>Задает оболочка совместимости Faker.get_Person()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.PhoneGet">
            <summary>Задает оболочка совместимости Faker.get_Phone()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.PhoneSetPhoneNumbers">
            <summary>Задает оболочка совместимости Faker.set_Phone(PhoneNumbers value)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.AllInstances.PickRandomOf1ICollectionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Faker,System.Collections.Generic.ICollection{``0},``0})">
            <summary>Задает оболочка совместимости Faker.PickRandom(ICollection`1&lt;!!0&gt; items)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.AllInstances.PickRandomOf1IEnumerableOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Faker,System.Collections.Generic.IEnumerable{``0},``0})">
            <summary>Задает оболочка совместимости Faker.PickRandom(IEnumerable`1&lt;!!0&gt; items)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.AllInstances.PickRandomOf1IEnumerableOfM0Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Faker,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Задает оболочка совместимости Faker.PickRandom(IEnumerable`1&lt;!!0&gt; items, Int32 amountToPick)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.AllInstances.PickRandomOf1IListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Faker,System.Collections.Generic.IList{``0},``0})">
            <summary>Задает оболочка совместимости Faker.PickRandom(IList`1&lt;!!0&gt; items)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.AllInstances.PickRandomOf1ListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Faker,System.Collections.Generic.List{``0},``0})">
            <summary>Задает оболочка совместимости Faker.PickRandom(List`1&lt;!!0&gt; items)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.AllInstances.PickRandomOf1M0Array``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Faker,``0[],``0})">
            <summary>Задает оболочка совместимости Faker.PickRandom(!!0[] items)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.AllInstances.PickRandomParamOf1M0Array``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Faker,``0[],``0})">
            <summary>Задает оболочка совместимости Faker.PickRandomParam(!!0[] items)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.RandomGet">
            <summary>Задает оболочка совместимости Faker.get_Random()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.RandomSetRandomizer">
            <summary>Задает оболочка совместимости Faker.set_Random(Randomizer value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.RantGet">
            <summary>Задает оболочка совместимости Faker.get_Rant()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.RantSetRant">
            <summary>Задает оболочка совместимости Faker.set_Rant(Rant value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.SystemGet">
            <summary>Задает оболочка совместимости Faker.get_System()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.SystemSetSystem">
            <summary>Задает оболочка совместимости Faker.set_System(System value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.AllInstances.UniqueIndexGet">
            <summary>Задает оболочка совместимости Faker.get_UniqueIndex()</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.Bind(Bogus.ILocaleAware)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.CommerceGet">
            <summary>Задает оболочка совместимости Faker.get_Commerce()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.CommerceSetCommerce">
            <summary>Задает оболочка совместимости Faker.set_Commerce(Commerce value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.CompanyGet">
            <summary>Задает оболочка совместимости Faker.get_Company()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.CompanySetCompany">
            <summary>Задает оболочка совместимости Faker.set_Company(Company value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.ConstructorString">
            <summary>Задает оболочка совместимости Faker.Faker(String locale)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.DatabaseGet">
            <summary>Задает оболочка совместимости Faker.get_Database()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.DatabaseSetDatabase">
            <summary>Задает оболочка совместимости Faker.set_Database(Database value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.DateGet">
            <summary>Задает оболочка совместимости Faker.get_Date()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.DateSetDate">
            <summary>Задает оболочка совместимости Faker.set_Date(Date value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.FinanceGet">
            <summary>Задает оболочка совместимости Faker.get_Finance()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.FinanceSetFinance">
            <summary>Задает оболочка совместимости Faker.set_Finance(Finance value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.HackerGet">
            <summary>Задает оболочка совместимости Faker.get_Hacker()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.HackerSetHacker">
            <summary>Задает оболочка совместимости Faker.set_Hacker(Hacker value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.HashidsGet">
            <summary>Задает оболочка совместимости Faker.get_Hashids()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.HashidsSetHashids">
            <summary>Задает оболочка совместимости Faker.set_Hashids(Hashids value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.ImageGet">
            <summary>Задает оболочка совместимости Faker.get_Image()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.ImageSetImages">
            <summary>Задает оболочка совместимости Faker.set_Image(Images value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.IndexGlobalGet">
            <summary>Задает оболочка совместимости Faker.get_IndexGlobal()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.InternetGet">
            <summary>Задает оболочка совместимости Faker.get_Internet()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.InternetSetInternet">
            <summary>Задает оболочка совместимости Faker.set_Internet(Internet value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.LocaleGet">
            <summary>Задает оболочка совместимости Faker.get_Locale()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.LocaleSetString">
            <summary>Задает оболочка совместимости Faker.set_Locale(String value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.LoremGet">
            <summary>Задает оболочка совместимости Faker.get_Lorem()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.LoremSetLorem">
            <summary>Задает оболочка совместимости Faker.set_Lorem(Lorem value)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.MakeLazyOf1Int32FuncOfInt32M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.Func{System.Int32,``0},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Задает оболочка совместимости Faker.MakeLazy(Int32 count, Func`2&lt;Int32,!!0&gt; action)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.MakeLazyOf1Int32FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.Func{``0},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Задает оболочка совместимости Faker.MakeLazy(Int32 count, Func`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.MakeOf1Int32FuncOfInt32M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.Func{System.Int32,``0},System.Collections.Generic.IList{``0}})">
            <summary>Задает оболочка совместимости Faker.Make(Int32 count, Func`2&lt;Int32,!!0&gt; action)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.MakeOf1Int32FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.Func{``0},System.Collections.Generic.IList{``0}})">
            <summary>Задает оболочка совместимости Faker.Make(Int32 count, Func`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.NameGet">
            <summary>Задает оболочка совместимости Faker.get_Name()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.NameSetName">
            <summary>Задает оболочка совместимости Faker.set_Name(Name value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.NewContext">
            <summary>Задает оболочка совместимости Faker.NewContext()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.ParseString">
            <summary>Задает оболочка совместимости Faker.Parse(String str)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.PersonGet">
            <summary>Задает оболочка совместимости Faker.get_Person()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.PhoneGet">
            <summary>Задает оболочка совместимости Faker.get_Phone()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.PhoneSetPhoneNumbers">
            <summary>Задает оболочка совместимости Faker.set_Phone(PhoneNumbers value)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.PickRandomOf1ICollectionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.ICollection{``0},``0})">
            <summary>Задает оболочка совместимости Faker.PickRandom(ICollection`1&lt;!!0&gt; items)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.PickRandomOf1IEnumerableOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},``0})">
            <summary>Задает оболочка совместимости Faker.PickRandom(IEnumerable`1&lt;!!0&gt; items)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.PickRandomOf1IEnumerableOfM0Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Задает оболочка совместимости Faker.PickRandom(IEnumerable`1&lt;!!0&gt; items, Int32 amountToPick)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.PickRandomOf1IListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IList{``0},``0})">
            <summary>Задает оболочка совместимости Faker.PickRandom(IList`1&lt;!!0&gt; items)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.PickRandomOf1ListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.List{``0},``0})">
            <summary>Задает оболочка совместимости Faker.PickRandom(List`1&lt;!!0&gt; items)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.PickRandomOf1M0Array``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[],``0})">
            <summary>Задает оболочка совместимости Faker.PickRandom(!!0[] items)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker.PickRandomParamOf1M0Array``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[],``0})">
            <summary>Задает оболочка совместимости Faker.PickRandomParam(!!0[] items)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.RandomGet">
            <summary>Задает оболочка совместимости Faker.get_Random()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.RandomSetRandomizer">
            <summary>Задает оболочка совместимости Faker.set_Random(Randomizer value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.RantGet">
            <summary>Задает оболочка совместимости Faker.get_Rant()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.RantSetRant">
            <summary>Задает оболочка совместимости Faker.set_Rant(Rant value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.StaticConstructor">
            <summary>Задает оболочка совместимости Faker.Faker()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.SystemGet">
            <summary>Задает оболочка совместимости Faker.get_System()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.SystemSetSystem">
            <summary>Задает оболочка совместимости Faker.set_System(System value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker.UniqueIndexGet">
            <summary>Задает оболочка совместимости Faker.get_UniqueIndex()</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimFaker`1">
            <summary>Тип оболочки совместимости для Bogus.Faker`1</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.#ctor(Bogus.Faker{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimFaker`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.AssertConfigurationIsValidString">
            <summary>Задает оболочка совместимости Faker`1.AssertConfigurationIsValid(String ruleSets)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.CustomInstantiatorFuncOfFakerT0">
            <summary>Задает оболочка совместимости Faker`1.CustomInstantiator(Func`2&lt;Faker,!0&gt; factoryMethod)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.FinishWithActionOfFakerT0">
            <summary>Задает оболочка совместимости Faker`1.FinishWith(Action`2&lt;Faker,!0&gt; action)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.GenerateForeverString">
            <summary>Задает оболочка совместимости Faker`1.GenerateForever(String ruleSets)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.GenerateInt32String">
            <summary>Задает оболочка совместимости Faker`1.Generate(Int32 count, String ruleSets)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.GenerateLazyInt32String">
            <summary>Задает оболочка совместимости Faker`1.GenerateLazy(Int32 count, String ruleSets)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.GenerateString">
            <summary>Задает оболочка совместимости Faker`1.Generate(String ruleSets)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.GetFieldOrPropertyTypeMemberInfo">
            <summary>Задает оболочка совместимости Faker`1.GetFieldOrPropertyType(MemberInfo mi)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.AllInstances.IgnoreOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Faker{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},Bogus.Faker{`0}})">
            <summary>Задает оболочка совместимости Faker`1.Ignore(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; propertyOrField)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.LocaleGet">
            <summary>Задает оболочка совместимости Faker`1.get_Locale()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.LocaleSetString">
            <summary>Задает оболочка совместимости Faker`1.set_Locale(String value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.MakeValidationExceptionValidationResult">
            <summary>Задает оболочка совместимости Faker`1.MakeValidationException(ValidationResult result)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.ParseDirtyRulesSetsString">
            <summary>Задает оболочка совместимости Faker`1.ParseDirtyRulesSets(String dirtyRules)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.PopulateInternalT0StringArray">
            <summary>Задает оболочка совместимости Faker`1.PopulateInternal(!0 instance, String[] ruleSets)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.PopulateT0String">
            <summary>Задает оболочка совместимости Faker`1.Populate(!0 instance, String ruleSets)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.AllInstances.RuleForOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Bogus.Faker{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}}})">
            <summary>Задает оболочка совместимости Faker`1.RuleFor(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; property)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.AllInstances.RuleForOf1ExpressionOfFuncOfT0M0FuncOfFakerM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Faker{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Bogus.Faker,``0},Bogus.Faker{`0}})">
            <summary>Задает оболочка совместимости Faker`1.RuleFor(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; property, Func`2&lt;Faker,!!0&gt; setter)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.AllInstances.RuleForOf1ExpressionOfFuncOfT0M0FuncOfFakerT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Faker{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Bogus.Faker,`0,``0},Bogus.Faker{`0}})">
            <summary>Задает оболочка совместимости Faker`1.RuleFor(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; property, Func`3&lt;Faker,!0,!!0&gt; setter)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.AllInstances.RuleForOf1ExpressionOfFuncOfT0M0FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Faker{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0},Bogus.Faker{`0}})">
            <summary>Задает оболочка совместимости Faker`1.RuleFor(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; property, Func`1&lt;!!0&gt; valueFunction)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.AllInstances.RuleForOf1ExpressionOfFuncOfT0M0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Faker{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,Bogus.Faker{`0}})">
            <summary>Задает оболочка совместимости Faker`1.RuleFor(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; property, !!0 value)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.AllInstances.RuleForOf1StringFuncOfFakerM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Faker{`0},System.String,System.Func{Bogus.Faker,``0},Bogus.Faker{`0}})">
            <summary>Задает оболочка совместимости Faker`1.RuleFor(String propertyOrField, Func`2&lt;Faker,!!0&gt; setter)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.AllInstances.RuleForTypeOf1TypeFuncOfFakerM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Faker{`0},System.Type,System.Func{Bogus.Faker,``0},Bogus.Faker{`0}})">
            <summary>Задает оболочка совместимости Faker`1.RuleForType(Type type, Func`2&lt;Faker,!!0&gt; setterForType)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.RuleSetStringActionOfIRuleSetOfT0">
            <summary>Задает оболочка совместимости Faker`1.RuleSet(String ruleSetName, Action`1&lt;IRuleSet`1&lt;!0&gt;&gt; action)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.RulesActionOfFakerT0">
            <summary>Задает оболочка совместимости Faker`1.Rules(Action`2&lt;Faker,!0&gt; setActions)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.StrictModeBoolean">
            <summary>Задает оболочка совместимости Faker`1.StrictMode(Boolean ensureRulesForAllProperties)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.ValidateInternalStringArray">
            <summary>Задает оболочка совместимости Faker`1.ValidateInternal(String[] ruleSets)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AllInstances.ValidateString">
            <summary>Задает оболочка совместимости Faker`1.Validate(String ruleSets)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.AssertConfigurationIsValidString">
            <summary>Задает оболочка совместимости Faker`1.AssertConfigurationIsValid(String ruleSets)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.Bind(Bogus.ILocaleAware)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.Bind(Bogus.IRuleSet{`0})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.Constructor">
            <summary>Задает оболочка совместимости Faker`1.Faker`1()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.ConstructorString">
            <summary>Задает оболочка совместимости Faker`1.Faker`1(String locale)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.ConstructorStringIBinder">
            <summary>Задает оболочка совместимости Faker`1.Faker`1(String locale, IBinder binder)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.CustomInstantiatorFuncOfFakerT0">
            <summary>Задает оболочка совместимости Faker`1.CustomInstantiator(Func`2&lt;Faker,!0&gt; factoryMethod)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.FinishWithActionOfFakerT0">
            <summary>Задает оболочка совместимости Faker`1.FinishWith(Action`2&lt;Faker,!0&gt; action)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.GenerateForeverString">
            <summary>Задает оболочка совместимости Faker`1.GenerateForever(String ruleSets)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.GenerateInt32String">
            <summary>Задает оболочка совместимости Faker`1.Generate(Int32 count, String ruleSets)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.GenerateLazyInt32String">
            <summary>Задает оболочка совместимости Faker`1.GenerateLazy(Int32 count, String ruleSets)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.GenerateString">
            <summary>Задает оболочка совместимости Faker`1.Generate(String ruleSets)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.GetFieldOrPropertyTypeMemberInfo">
            <summary>Задает оболочка совместимости Faker`1.GetFieldOrPropertyType(MemberInfo mi)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.IgnoreOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},Bogus.Faker{`0}})">
            <summary>Задает оболочка совместимости Faker`1.Ignore(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; propertyOrField)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.ImplicitOpFakerOfT0T0">
            <summary>Задает оболочка совместимости Faker`1.op_Implicit(Faker`1&lt;!0&gt; faker)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.LocaleGet">
            <summary>Задает оболочка совместимости Faker`1.get_Locale()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.LocaleSetString">
            <summary>Задает оболочка совместимости Faker`1.set_Locale(String value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.MakeValidationExceptionValidationResult">
            <summary>Задает оболочка совместимости Faker`1.MakeValidationException(ValidationResult result)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.ParseDirtyRulesSetsString">
            <summary>Задает оболочка совместимости Faker`1.ParseDirtyRulesSets(String dirtyRules)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.PopulateInternalT0StringArray">
            <summary>Задает оболочка совместимости Faker`1.PopulateInternal(!0 instance, String[] ruleSets)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.PopulateT0String">
            <summary>Задает оболочка совместимости Faker`1.Populate(!0 instance, String ruleSets)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.RuleForOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Linq.Expressions.Expression{System.Func{`0,``0}}})">
            <summary>Задает оболочка совместимости Faker`1.RuleFor(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; property)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.RuleForOf1ExpressionOfFuncOfT0M0FuncOfFakerM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Bogus.Faker,``0},Bogus.Faker{`0}})">
            <summary>Задает оболочка совместимости Faker`1.RuleFor(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; property, Func`2&lt;Faker,!!0&gt; setter)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.RuleForOf1ExpressionOfFuncOfT0M0FuncOfFakerT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Bogus.Faker,`0,``0},Bogus.Faker{`0}})">
            <summary>Задает оболочка совместимости Faker`1.RuleFor(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; property, Func`3&lt;Faker,!0,!!0&gt; setter)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.RuleForOf1ExpressionOfFuncOfT0M0FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0},Bogus.Faker{`0}})">
            <summary>Задает оболочка совместимости Faker`1.RuleFor(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; property, Func`1&lt;!!0&gt; valueFunction)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.RuleForOf1ExpressionOfFuncOfT0M0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,Bogus.Faker{`0}})">
            <summary>Задает оболочка совместимости Faker`1.RuleFor(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; property, !!0 value)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.RuleForOf1StringFuncOfFakerM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Func{Bogus.Faker,``0},Bogus.Faker{`0}})">
            <summary>Задает оболочка совместимости Faker`1.RuleFor(String propertyOrField, Func`2&lt;Faker,!!0&gt; setter)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFaker`1.RuleForTypeOf1TypeFuncOfFakerM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.Func{Bogus.Faker,``0},Bogus.Faker{`0}})">
            <summary>Задает оболочка совместимости Faker`1.RuleForType(Type type, Func`2&lt;Faker,!!0&gt; setterForType)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.RuleSetStringActionOfIRuleSetOfT0">
            <summary>Задает оболочка совместимости Faker`1.RuleSet(String ruleSetName, Action`1&lt;IRuleSet`1&lt;!0&gt;&gt; action)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.RulesActionOfFakerT0">
            <summary>Задает оболочка совместимости Faker`1.Rules(Action`2&lt;Faker,!0&gt; setActions)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.StaticConstructor">
            <summary>Задает оболочка совместимости Faker`1.Faker`1()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.StrictModeBoolean">
            <summary>Задает оболочка совместимости Faker`1.StrictMode(Boolean ensureRulesForAllProperties)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.ValidateInternalStringArray">
            <summary>Задает оболочка совместимости Faker`1.ValidateInternal(String[] ruleSets)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFaker`1.ValidateString">
            <summary>Задает оболочка совместимости Faker`1.Validate(String ruleSets)</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimFinalizeAction`1">
            <summary>Тип оболочки совместимости для Bogus.FinalizeAction`1</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFinalizeAction`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFinalizeAction`1.#ctor(Bogus.FinalizeAction{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimFinalizeAction`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFinalizeAction`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimFinalizeAction`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFinalizeAction`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimFinalizeAction`1.Constructor">
            <summary>Задает оболочка совместимости FinalizeAction`1.FinalizeAction`1()</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimHashids">
            <summary>Тип оболочки совместимости для Bogus.Hashids</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimHashids.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimHashids.#ctor(Bogus.Hashids)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimHashids.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.ConsistentShuffleStringString">
            <summary>Задает оболочка совместимости Hashids.ConsistentShuffle(String alphabet, String salt)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.DecodeHexString">
            <summary>Задает оболочка совместимости Hashids.DecodeHex(String hash)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.DecodeLongString">
            <summary>Задает оболочка совместимости Hashids.DecodeLong(String hash)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.DecodeString">
            <summary>Задает оболочка совместимости Hashids.Decode(String hash)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.DecryptHexString">
            <summary>Задает оболочка совместимости Hashids.DecryptHex(String hash)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.DecryptString">
            <summary>Задает оболочка совместимости Hashids.Decrypt(String hash)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.EncodeHexString">
            <summary>Задает оболочка совместимости Hashids.EncodeHex(String hex)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.EncodeIEnumerableOfInt32">
            <summary>Задает оболочка совместимости Hashids.Encode(IEnumerable`1&lt;Int32&gt; numbers)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.EncodeInt32Array">
            <summary>Задает оболочка совместимости Hashids.Encode(Int32[] numbers)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.EncodeLongIEnumerableOfInt64">
            <summary>Задает оболочка совместимости Hashids.EncodeLong(IEnumerable`1&lt;Int64&gt; numbers)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.EncodeLongInt64Array">
            <summary>Задает оболочка совместимости Hashids.EncodeLong(Int64[] numbers)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.EncryptHexString">
            <summary>Задает оболочка совместимости Hashids.EncryptHex(String hex)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.EncryptInt32Array">
            <summary>Задает оболочка совместимости Hashids.Encrypt(Int32[] numbers)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.GenerateHashFromInt64Array">
            <summary>Задает оболочка совместимости Hashids.GenerateHashFrom(Int64[] numbers)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.GetNumbersFromString">
            <summary>Задает оболочка совместимости Hashids.GetNumbersFrom(String hash)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.HashInt64String">
            <summary>Задает оболочка совместимости Hashids.Hash(Int64 input, String alphabet)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.SetupGuards">
            <summary>Задает оболочка совместимости Hashids.SetupGuards()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.SetupSeps">
            <summary>Задает оболочка совместимости Hashids.SetupSeps()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.AllInstances.UnhashStringString">
            <summary>Задает оболочка совместимости Hashids.Unhash(String input, String alphabet)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimHashids.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimHashids.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimHashids.Bind(Bogus.IHashids)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.ConsistentShuffleStringString">
            <summary>Задает оболочка совместимости Hashids.ConsistentShuffle(String alphabet, String salt)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.Constructor">
            <summary>Задает оболочка совместимости Hashids.Hashids()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.ConstructorStringInt32StringString">
            <summary>Задает оболочка совместимости Hashids.Hashids(String salt, Int32 minHashLength, String alphabet, String seps)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.DecodeHexString">
            <summary>Задает оболочка совместимости Hashids.DecodeHex(String hash)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.DecodeLongString">
            <summary>Задает оболочка совместимости Hashids.DecodeLong(String hash)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.DecodeString">
            <summary>Задает оболочка совместимости Hashids.Decode(String hash)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.DecryptHexString">
            <summary>Задает оболочка совместимости Hashids.DecryptHex(String hash)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.DecryptString">
            <summary>Задает оболочка совместимости Hashids.Decrypt(String hash)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.EncodeHexString">
            <summary>Задает оболочка совместимости Hashids.EncodeHex(String hex)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.EncodeIEnumerableOfInt32">
            <summary>Задает оболочка совместимости Hashids.Encode(IEnumerable`1&lt;Int32&gt; numbers)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.EncodeInt32Array">
            <summary>Задает оболочка совместимости Hashids.Encode(Int32[] numbers)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.EncodeLongIEnumerableOfInt64">
            <summary>Задает оболочка совместимости Hashids.EncodeLong(IEnumerable`1&lt;Int64&gt; numbers)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.EncodeLongInt64Array">
            <summary>Задает оболочка совместимости Hashids.EncodeLong(Int64[] numbers)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.EncryptHexString">
            <summary>Задает оболочка совместимости Hashids.EncryptHex(String hex)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.EncryptInt32Array">
            <summary>Задает оболочка совместимости Hashids.Encrypt(Int32[] numbers)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.GenerateHashFromInt64Array">
            <summary>Задает оболочка совместимости Hashids.GenerateHashFrom(Int64[] numbers)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.GetNumbersFromString">
            <summary>Задает оболочка совместимости Hashids.GetNumbersFrom(String hash)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.HashInt64String">
            <summary>Задает оболочка совместимости Hashids.Hash(Int64 input, String alphabet)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.SetupGuards">
            <summary>Задает оболочка совместимости Hashids.SetupGuards()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.SetupSeps">
            <summary>Задает оболочка совместимости Hashids.SetupSeps()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.StaticConstructor">
            <summary>Задает оболочка совместимости Hashids.Hashids()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimHashids.UnhashStringString">
            <summary>Задает оболочка совместимости Hashids.Unhash(String input, String alphabet)</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimMultiDictionary`3">
            <summary>Тип оболочки совместимости для Bogus.MultiDictionary`3</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiDictionary`3.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiDictionary`3.#ctor(Bogus.MultiDictionary{`0,`1,`2})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMultiDictionary`3.AddT0T1T2">
            <summary>Задает оболочка совместимости MultiDictionary`3.Add(!0 key, !1 key2, !2 value)</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimMultiDictionary`3.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMultiDictionary`3.AllInstances.AddT0T1T2">
            <summary>Задает оболочка совместимости MultiDictionary`3.Add(!0 key, !1 key2, !2 value)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiDictionary`3.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiDictionary`3.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMultiDictionary`3.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiDictionary`3.Bind(System.Collections.ICollection)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiDictionary`3.Bind(System.Collections.IDictionary)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiDictionary`3.Bind(System.Collections.IEnumerable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiDictionary`3.Bind(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.Dictionary{`1,`2}}})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiDictionary`3.Bind(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.Dictionary{`1,`2}}})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiDictionary`3.Bind(System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.Dictionary{`1,`2}}})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiDictionary`3.Bind(System.Collections.Generic.IDictionary{`0,System.Collections.Generic.Dictionary{`1,`2}})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiDictionary`3.Bind(System.Collections.Generic.IReadOnlyDictionary{`0,System.Collections.Generic.Dictionary{`1,`2}})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiDictionary`3.Bind(System.Runtime.Serialization.IDeserializationCallback)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiDictionary`3.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMultiDictionary`3.ConstructorIEqualityComparerOfT0">
            <summary>Задает оболочка совместимости MultiDictionary`3.MultiDictionary`3(IEqualityComparer`1&lt;!0&gt; comparer)</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimMultiSetDictionary`2">
            <summary>Тип оболочки совместимости для Bogus.MultiSetDictionary`2</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiSetDictionary`2.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiSetDictionary`2.#ctor(Bogus.MultiSetDictionary{`0,`1})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMultiSetDictionary`2.AddT0T1">
            <summary>Задает оболочка совместимости MultiSetDictionary`2.Add(!0 key, !1 value)</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimMultiSetDictionary`2.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMultiSetDictionary`2.AllInstances.AddT0T1">
            <summary>Задает оболочка совместимости MultiSetDictionary`2.Add(!0 key, !1 value)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiSetDictionary`2.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiSetDictionary`2.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMultiSetDictionary`2.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiSetDictionary`2.Bind(System.Collections.ICollection)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiSetDictionary`2.Bind(System.Collections.IDictionary)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiSetDictionary`2.Bind(System.Collections.IEnumerable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiSetDictionary`2.Bind(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.HashSet{`1}}})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiSetDictionary`2.Bind(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.HashSet{`1}}})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiSetDictionary`2.Bind(System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.HashSet{`1}}})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiSetDictionary`2.Bind(System.Collections.Generic.IDictionary{`0,System.Collections.Generic.HashSet{`1}})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiSetDictionary`2.Bind(System.Collections.Generic.IReadOnlyDictionary{`0,System.Collections.Generic.HashSet{`1}})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiSetDictionary`2.Bind(System.Runtime.Serialization.IDeserializationCallback)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMultiSetDictionary`2.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMultiSetDictionary`2.ConstructorIEqualityComparerOfT0">
            <summary>Задает оболочка совместимости MultiSetDictionary`2.MultiSetDictionary`2(IEqualityComparer`1&lt;!0&gt; comparer)</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimMustashMethod">
            <summary>Тип оболочки совместимости для Bogus.MustashMethod</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMustashMethod.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMustashMethod.#ctor(Bogus.MustashMethod)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimMustashMethod.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMustashMethod.AllInstances.MethodGet">
            <summary>Задает оболочка совместимости MustashMethod.get_Method()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMustashMethod.AllInstances.MethodSetMethodInfo">
            <summary>Задает оболочка совместимости MustashMethod.set_Method(MethodInfo value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMustashMethod.AllInstances.NameGet">
            <summary>Задает оболочка совместимости MustashMethod.get_Name()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMustashMethod.AllInstances.NameSetString">
            <summary>Задает оболочка совместимости MustashMethod.set_Name(String value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMustashMethod.AllInstances.OptionalArgsGet">
            <summary>Задает оболочка совместимости MustashMethod.get_OptionalArgs()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMustashMethod.AllInstances.OptionalArgsSetObjectArray">
            <summary>Задает оболочка совместимости MustashMethod.set_OptionalArgs(Object[] value)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMustashMethod.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimMustashMethod.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMustashMethod.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMustashMethod.Constructor">
            <summary>Задает оболочка совместимости MustashMethod.MustashMethod()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMustashMethod.MethodGet">
            <summary>Задает оболочка совместимости MustashMethod.get_Method()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMustashMethod.MethodSetMethodInfo">
            <summary>Задает оболочка совместимости MustashMethod.set_Method(MethodInfo value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMustashMethod.NameGet">
            <summary>Задает оболочка совместимости MustashMethod.get_Name()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMustashMethod.NameSetString">
            <summary>Задает оболочка совместимости MustashMethod.set_Name(String value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMustashMethod.OptionalArgsGet">
            <summary>Задает оболочка совместимости MustashMethod.get_OptionalArgs()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimMustashMethod.OptionalArgsSetObjectArray">
            <summary>Задает оболочка совместимости MustashMethod.set_OptionalArgs(Object[] value)</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimPerson">
            <summary>Тип оболочки совместимости для Bogus.Person</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPerson.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPerson.#ctor(Bogus.Person)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimPerson.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimPerson.AllInstances.InitializeString">
            <summary>Задает оболочка совместимости Person.Initialize(String locale)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPerson.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPerson.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimPerson.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimPerson.ConstructorString">
            <summary>Задает оболочка совместимости Person.Person(String locale)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimPerson.InitializeString">
            <summary>Задает оболочка совместимости Person.Initialize(String locale)</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimPerson.ShimCardAddress">
            <summary>Тип оболочки совместимости для Bogus.Person+CardAddress</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPerson.ShimCardAddress.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPerson.ShimCardAddress.#ctor(Bogus.Person.CardAddress)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimPerson.ShimCardAddress.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPerson.ShimCardAddress.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPerson.ShimCardAddress.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimPerson.ShimCardAddress.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimPerson.ShimCardAddress.Constructor">
            <summary>Задает оболочка совместимости CardAddress.CardAddress()</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimPerson.ShimCardAddress.ShimCardGeo">
            <summary>Тип оболочки совместимости для Bogus.Person+CardAddress+CardGeo</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPerson.ShimCardAddress.ShimCardGeo.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPerson.ShimCardAddress.ShimCardGeo.#ctor(Bogus.Person.CardAddress.CardGeo)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimPerson.ShimCardAddress.ShimCardGeo.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPerson.ShimCardAddress.ShimCardGeo.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPerson.ShimCardAddress.ShimCardGeo.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimPerson.ShimCardAddress.ShimCardGeo.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimPerson.ShimCardAddress.ShimCardGeo.Constructor">
            <summary>Задает оболочка совместимости CardGeo.CardGeo()</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimPerson.ShimCardCompany">
            <summary>Тип оболочки совместимости для Bogus.Person+CardCompany</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPerson.ShimCardCompany.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPerson.ShimCardCompany.#ctor(Bogus.Person.CardCompany)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimPerson.ShimCardCompany.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPerson.ShimCardCompany.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPerson.ShimCardCompany.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimPerson.ShimCardCompany.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimPerson.ShimCardCompany.Constructor">
            <summary>Задает оболочка совместимости CardCompany.CardCompany()</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimPopulateAction`1">
            <summary>Тип оболочки совместимости для Bogus.PopulateAction`1</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPopulateAction`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPopulateAction`1.#ctor(Bogus.PopulateAction{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimPopulateAction`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPopulateAction`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimPopulateAction`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimPopulateAction`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimPopulateAction`1.Constructor">
            <summary>Задает оболочка совместимости PopulateAction`1.PopulateAction`1()</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimRandomizer">
            <summary>Тип оболочки совместимости для Bogus.Randomizer</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.#ctor(Bogus.Randomizer)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimRandomizer.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.AlphaNumericInt32">
            <summary>Задает оболочка совместимости Randomizer.AlphaNumeric(Int32 count)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.ArrayElementArray">
            <summary>Задает оболочка совместимости Randomizer.ArrayElement(Array array)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.ArrayElementBArrayNullableOfInt32NullableOfInt32">
            <summary>Задает оболочка совместимости Randomizer.ArrayElement(BArray props, Nullable`1&lt;Int32&gt; min, Nullable`1&lt;Int32&gt; max)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.AllInstances.ArrayElementOf1M0Array``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Randomizer,``0[],``0})">
            <summary>Задает оболочка совместимости Randomizer.ArrayElement(!!0[] array)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.AllInstances.ArrayElementsOf1M0ArrayNullableOfInt32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Randomizer,``0[],System.Nullable{System.Int32},``0[]})">
            <summary>Задает оболочка совместимости Randomizer.ArrayElements(!!0[] array, Nullable`1&lt;Int32&gt; count)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.Bool">
            <summary>Задает оболочка совместимости Randomizer.Bool()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.ByteByteByte">
            <summary>Задает оболочка совместимости Randomizer.Byte(Byte min, Byte max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.BytesInt32">
            <summary>Задает оболочка совместимости Randomizer.Bytes(Int32 count)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.CharCharChar">
            <summary>Задает оболочка совместимости Randomizer.Char(Char min, Char max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.CharsCharCharInt32">
            <summary>Задает оболочка совместимости Randomizer.Chars(Char min, Char max, Int32 count)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.AllInstances.CollectionItemOf1ICollectionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Randomizer,System.Collections.Generic.ICollection{``0},``0})">
            <summary>Задает оболочка совместимости Randomizer.CollectionItem(ICollection`1&lt;!!0&gt; collection)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.DecimalDecimalDecimal">
            <summary>Задает оболочка совместимости Randomizer.Decimal(Decimal min, Decimal max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.DigitsInt32Int32Int32">
            <summary>Задает оболочка совместимости Randomizer.Digits(Int32 count, Int32 minDigit, Int32 maxDigit)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.DoubleDoubleDouble">
            <summary>Задает оболочка совместимости Randomizer.Double(Double min, Double max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.EvenInt32Int32">
            <summary>Задает оболочка совместимости Randomizer.Even(Int32 min, Int32 max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.FloatSingleSingle">
            <summary>Задает оболочка совместимости Randomizer.Float(Single min, Single max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.HexadecimalInt32String">
            <summary>Задает оболочка совместимости Randomizer.Hexadecimal(Int32 length, String prefix)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.IntInt32Int32">
            <summary>Задает оболочка совместимости Randomizer.Int(Int32 min, Int32 max)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.AllInstances.ListItemOf1IListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Randomizer,System.Collections.Generic.IList{``0},``0})">
            <summary>Задает оболочка совместимости Randomizer.ListItem(IList`1&lt;!!0&gt; list)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.AllInstances.ListItemOf1ListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Randomizer,System.Collections.Generic.List{``0},``0})">
            <summary>Задает оболочка совместимости Randomizer.ListItem(List`1&lt;!!0&gt; list)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.AllInstances.ListItemsOf1IListOfM0NullableOfInt32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Randomizer,System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Collections.Generic.List{``0}})">
            <summary>Задает оболочка совместимости Randomizer.ListItems(IList`1&lt;!!0&gt; items, Nullable`1&lt;Int32&gt; count)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.AllInstances.ListItemsOf1ListOfM0NullableOfInt32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Randomizer,System.Collections.Generic.List{``0},System.Nullable{System.Int32},System.Collections.Generic.IList{``0}})">
            <summary>Задает оболочка совместимости Randomizer.ListItems(List`1&lt;!!0&gt; items, Nullable`1&lt;Int32&gt; count)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.LongInt64Int64">
            <summary>Задает оболочка совместимости Randomizer.Long(Int64 min, Int64 max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.NumberInt32">
            <summary>Задает оболочка совместимости Randomizer.Number(Int32 max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.NumberInt32Int32">
            <summary>Задает оболочка совместимости Randomizer.Number(Int32 min, Int32 max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.OddInt32Int32">
            <summary>Задает оболочка совместимости Randomizer.Odd(Int32 min, Int32 max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.RandomLocale">
            <summary>Задает оболочка совместимости Randomizer.RandomLocale()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.ReplaceNumbersStringChar">
            <summary>Задает оболочка совместимости Randomizer.ReplaceNumbers(String format, Char symbol)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.ReplaceString">
            <summary>Задает оболочка совместимости Randomizer.Replace(String format)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.ReplaceSymbolsStringCharFuncOfChar">
            <summary>Задает оболочка совместимости Randomizer.ReplaceSymbols(String format, Char symbol, Func`1&lt;Char&gt; func)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.SByteSByteSByte">
            <summary>Задает оболочка совместимости Randomizer.SByte(SByte min, SByte max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.ShortInt16Int16">
            <summary>Задает оболочка совместимости Randomizer.Short(Int16 min, Int16 max)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.AllInstances.ShuffleOf1IEnumerableOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Randomizer,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Задает оболочка совместимости Randomizer.Shuffle(IEnumerable`1&lt;!!0&gt; source)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.UIntUInt32UInt32">
            <summary>Задает оболочка совместимости Randomizer.UInt(UInt32 min, UInt32 max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.ULongUInt64UInt64">
            <summary>Задает оболочка совместимости Randomizer.ULong(UInt64 min, UInt64 max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.UShortUInt16UInt16">
            <summary>Задает оболочка совместимости Randomizer.UShort(UInt16 min, UInt16 max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.Uuid">
            <summary>Задает оболочка совместимости Randomizer.Uuid()</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.AllInstances.WeightedRandomOf1M0ArraySingleArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Bogus.Randomizer,``0[],System.Single[],``0})">
            <summary>Задает оболочка совместимости Randomizer.WeightedRandom(!!0[] items, Single[] weights)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.Word">
            <summary>Задает оболочка совместимости Randomizer.Word()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.WordsArrayInt32">
            <summary>Задает оболочка совместимости Randomizer.WordsArray(Int32 count)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.WordsArrayInt32Int32">
            <summary>Задает оболочка совместимости Randomizer.WordsArray(Int32 min, Int32 max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances.WordsNullableOfInt32">
            <summary>Задает оболочка совместимости Randomizer.Words(Nullable`1&lt;Int32&gt; count)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances._AlphaNumericb__43_0StringBuilderInt32">
            <summary>Задает оболочка совместимости Randomizer.&lt;AlphaNumeric&gt;b__43_0(StringBuilder b, Int32 i)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances._Hexadecimalb__45_0StringBuilderInt32">
            <summary>Задает оболочка совместимости Randomizer.&lt;Hexadecimal&gt;b__45_0(StringBuilder b, Int32 i)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances._ReplaceNumbersb__31_0">
            <summary>Задает оболочка совместимости Randomizer.&lt;ReplaceNumbers&gt;b__31_0()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances._Replaceb__33_0Char">
            <summary>Задает оболочка совместимости Randomizer.&lt;Replace&gt;b__33_0(Char c)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AllInstances._WordsArrayb__39_0Int32">
            <summary>Задает оболочка совместимости Randomizer.&lt;WordsArray&gt;b__39_0(Int32 f)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.AlphaNumericInt32">
            <summary>Задает оболочка совместимости Randomizer.AlphaNumeric(Int32 count)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.ArrayElementArray">
            <summary>Задает оболочка совместимости Randomizer.ArrayElement(Array array)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.ArrayElementBArrayNullableOfInt32NullableOfInt32">
            <summary>Задает оболочка совместимости Randomizer.ArrayElement(BArray props, Nullable`1&lt;Int32&gt; min, Nullable`1&lt;Int32&gt; max)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.ArrayElementOf1M0Array``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[],``0})">
            <summary>Задает оболочка совместимости Randomizer.ArrayElement(!!0[] array)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.ArrayElementsOf1M0ArrayNullableOfInt32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[],System.Nullable{System.Int32},``0[]})">
            <summary>Задает оболочка совместимости Randomizer.ArrayElements(!!0[] array, Nullable`1&lt;Int32&gt; count)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.Bool">
            <summary>Задает оболочка совместимости Randomizer.Bool()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.ByteByteByte">
            <summary>Задает оболочка совместимости Randomizer.Byte(Byte min, Byte max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.BytesInt32">
            <summary>Задает оболочка совместимости Randomizer.Bytes(Int32 count)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.CharCharChar">
            <summary>Задает оболочка совместимости Randomizer.Char(Char min, Char max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.CharsCharCharInt32">
            <summary>Задает оболочка совместимости Randomizer.Chars(Char min, Char max, Int32 count)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.CollectionItemOf1ICollectionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.ICollection{``0},``0})">
            <summary>Задает оболочка совместимости Randomizer.CollectionItem(ICollection`1&lt;!!0&gt; collection)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.Constructor">
            <summary>Задает оболочка совместимости Randomizer.Randomizer()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.DecimalDecimalDecimal">
            <summary>Задает оболочка совместимости Randomizer.Decimal(Decimal min, Decimal max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.DigitsInt32Int32Int32">
            <summary>Задает оболочка совместимости Randomizer.Digits(Int32 count, Int32 minDigit, Int32 maxDigit)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.DoubleDoubleDouble">
            <summary>Задает оболочка совместимости Randomizer.Double(Double min, Double max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.EvenInt32Int32">
            <summary>Задает оболочка совместимости Randomizer.Even(Int32 min, Int32 max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.FloatSingleSingle">
            <summary>Задает оболочка совместимости Randomizer.Float(Single min, Single max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.HexadecimalInt32String">
            <summary>Задает оболочка совместимости Randomizer.Hexadecimal(Int32 length, String prefix)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.IntInt32Int32">
            <summary>Задает оболочка совместимости Randomizer.Int(Int32 min, Int32 max)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.ListItemOf1IListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IList{``0},``0})">
            <summary>Задает оболочка совместимости Randomizer.ListItem(IList`1&lt;!!0&gt; list)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.ListItemOf1ListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.List{``0},``0})">
            <summary>Задает оболочка совместимости Randomizer.ListItem(List`1&lt;!!0&gt; list)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.ListItemsOf1IListOfM0NullableOfInt32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Collections.Generic.List{``0}})">
            <summary>Задает оболочка совместимости Randomizer.ListItems(IList`1&lt;!!0&gt; items, Nullable`1&lt;Int32&gt; count)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.ListItemsOf1ListOfM0NullableOfInt32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.List{``0},System.Nullable{System.Int32},System.Collections.Generic.IList{``0}})">
            <summary>Задает оболочка совместимости Randomizer.ListItems(List`1&lt;!!0&gt; items, Nullable`1&lt;Int32&gt; count)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.LongInt64Int64">
            <summary>Задает оболочка совместимости Randomizer.Long(Int64 min, Int64 max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.NumberInt32">
            <summary>Задает оболочка совместимости Randomizer.Number(Int32 max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.NumberInt32Int32">
            <summary>Задает оболочка совместимости Randomizer.Number(Int32 min, Int32 max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.OddInt32Int32">
            <summary>Задает оболочка совместимости Randomizer.Odd(Int32 min, Int32 max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.RandomLocale">
            <summary>Задает оболочка совместимости Randomizer.RandomLocale()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.ReplaceNumbersStringChar">
            <summary>Задает оболочка совместимости Randomizer.ReplaceNumbers(String format, Char symbol)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.ReplaceString">
            <summary>Задает оболочка совместимости Randomizer.Replace(String format)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.ReplaceSymbolsStringCharFuncOfChar">
            <summary>Задает оболочка совместимости Randomizer.ReplaceSymbols(String format, Char symbol, Func`1&lt;Char&gt; func)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.SByteSByteSByte">
            <summary>Задает оболочка совместимости Randomizer.SByte(SByte min, SByte max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.ShortInt16Int16">
            <summary>Задает оболочка совместимости Randomizer.Short(Int16 min, Int16 max)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.ShuffleOf1IEnumerableOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Задает оболочка совместимости Randomizer.Shuffle(IEnumerable`1&lt;!!0&gt; source)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.StaticConstructor">
            <summary>Задает оболочка совместимости Randomizer.Randomizer()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.UIntUInt32UInt32">
            <summary>Задает оболочка совместимости Randomizer.UInt(UInt32 min, UInt32 max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.ULongUInt64UInt64">
            <summary>Задает оболочка совместимости Randomizer.ULong(UInt64 min, UInt64 max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.UShortUInt16UInt16">
            <summary>Задает оболочка совместимости Randomizer.UShort(UInt16 min, UInt16 max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.Uuid">
            <summary>Задает оболочка совместимости Randomizer.Uuid()</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRandomizer.WeightedRandomOf1M0ArraySingleArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[],System.Single[],``0})">
            <summary>Задает оболочка совместимости Randomizer.WeightedRandom(!!0[] items, Single[] weights)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.Word">
            <summary>Задает оболочка совместимости Randomizer.Word()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.WordsArrayInt32">
            <summary>Задает оболочка совместимости Randomizer.WordsArray(Int32 count)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.WordsArrayInt32Int32">
            <summary>Задает оболочка совместимости Randomizer.WordsArray(Int32 min, Int32 max)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer.WordsNullableOfInt32">
            <summary>Задает оболочка совместимости Randomizer.Words(Nullable`1&lt;Int32&gt; count)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer._AlphaNumericb__43_0StringBuilderInt32">
            <summary>Задает оболочка совместимости Randomizer.&lt;AlphaNumeric&gt;b__43_0(StringBuilder b, Int32 i)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer._Hexadecimalb__45_0StringBuilderInt32">
            <summary>Задает оболочка совместимости Randomizer.&lt;Hexadecimal&gt;b__45_0(StringBuilder b, Int32 i)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer._ReplaceNumbersb__31_0">
            <summary>Задает оболочка совместимости Randomizer.&lt;ReplaceNumbers&gt;b__31_0()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer._Replaceb__33_0Char">
            <summary>Задает оболочка совместимости Randomizer.&lt;Replace&gt;b__33_0(Char c)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRandomizer._WordsArrayb__39_0Int32">
            <summary>Задает оболочка совместимости Randomizer.&lt;WordsArray&gt;b__39_0(Int32 f)</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimRule`1">
            <summary>Тип оболочки совместимости для Bogus.Rule`1</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRule`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRule`1.#ctor(Bogus.Rule{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRule`1.ActionGet">
            <summary>Задает оболочка совместимости Rule`1.get_Action()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRule`1.ActionSetT0">
            <summary>Задает оболочка совместимости Rule`1.set_Action(!0 value)</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimRule`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRule`1.AllInstances.ActionGet">
            <summary>Задает оболочка совместимости Rule`1.get_Action()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRule`1.AllInstances.ActionSetT0">
            <summary>Задает оболочка совместимости Rule`1.set_Action(!0 value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRule`1.AllInstances.ProhibitInStrictModeGet">
            <summary>Задает оболочка совместимости Rule`1.get_ProhibitInStrictMode()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRule`1.AllInstances.ProhibitInStrictModeSetBoolean">
            <summary>Задает оболочка совместимости Rule`1.set_ProhibitInStrictMode(Boolean value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRule`1.AllInstances.PropertyNameGet">
            <summary>Задает оболочка совместимости Rule`1.get_PropertyName()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRule`1.AllInstances.PropertyNameSetString">
            <summary>Задает оболочка совместимости Rule`1.set_PropertyName(String value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRule`1.AllInstances.RuleSetGet">
            <summary>Задает оболочка совместимости Rule`1.get_RuleSet()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRule`1.AllInstances.RuleSetSetString">
            <summary>Задает оболочка совместимости Rule`1.set_RuleSet(String value)</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRule`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimRule`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRule`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRule`1.Constructor">
            <summary>Задает оболочка совместимости Rule`1.Rule`1()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRule`1.ProhibitInStrictModeGet">
            <summary>Задает оболочка совместимости Rule`1.get_ProhibitInStrictMode()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRule`1.ProhibitInStrictModeSetBoolean">
            <summary>Задает оболочка совместимости Rule`1.set_ProhibitInStrictMode(Boolean value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRule`1.PropertyNameGet">
            <summary>Задает оболочка совместимости Rule`1.get_PropertyName()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRule`1.PropertyNameSetString">
            <summary>Задает оболочка совместимости Rule`1.set_PropertyName(String value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRule`1.RuleSetGet">
            <summary>Задает оболочка совместимости Rule`1.get_RuleSet()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimRule`1.RuleSetSetString">
            <summary>Задает оболочка совместимости Rule`1.set_RuleSet(String value)</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimTokenizer">
            <summary>Тип оболочки совместимости для Bogus.Tokenizer</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimTokenizer.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimTokenizer.#ctor(Bogus.Tokenizer)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimTokenizer.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimTokenizer.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimTokenizer.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimTokenizer.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimTokenizer.Constructor">
            <summary>Задает оболочка совместимости Tokenizer.Tokenizer()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimTokenizer.ParseOldStringDataSetArray">
            <summary>Задает оболочка совместимости Tokenizer.ParseOld(String expr, DataSet[] dataSets)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimTokenizer.ParseStringDataSetArray">
            <summary>Задает оболочка совместимости Tokenizer.Parse(String str, DataSet[] dataSets)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimTokenizer.RegisterMustashMethods">
            <summary>Задает оболочка совместимости Tokenizer.RegisterMustashMethods()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimTokenizer.StaticConstructor">
            <summary>Задает оболочка совместимости Tokenizer.Tokenizer()</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimUtils">
            <summary>Тип оболочки совместимости для Bogus.Utils</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimUtils.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimUtils.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimUtils.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimUtils.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimUtils.SlashifyIEnumerableOfStringString">
            <summary>Задает оболочка совместимости Utils.Slashify(IEnumerable`1&lt;String&gt; parts, String separator)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimUtils.SlugifyString">
            <summary>Задает оболочка совместимости Utils.Slugify(String txt)</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimValidationException">
            <summary>Тип оболочки совместимости для Bogus.ValidationException</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimValidationException.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimValidationException.#ctor(Bogus.ValidationException)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimValidationException.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimValidationException.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimValidationException.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimValidationException.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimValidationException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimValidationException.ConstructorString">
            <summary>Задает оболочка совместимости ValidationException.ValidationException(String message)</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimValidationResult">
            <summary>Тип оболочки совместимости для Bogus.ValidationResult</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimValidationResult.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimValidationResult.#ctor(Bogus.ValidationResult)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimValidationResult.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimValidationResult.AllInstances.ExtraMessagesGet">
            <summary>Задает оболочка совместимости ValidationResult.get_ExtraMessages()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimValidationResult.AllInstances.IsValidGet">
            <summary>Задает оболочка совместимости ValidationResult.get_IsValid()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimValidationResult.AllInstances.IsValidSetBoolean">
            <summary>Задает оболочка совместимости ValidationResult.set_IsValid(Boolean value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimValidationResult.AllInstances.MissingRulesGet">
            <summary>Задает оболочка совместимости ValidationResult.get_MissingRules()</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimValidationResult.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimValidationResult.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimValidationResult.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimValidationResult.Constructor">
            <summary>Задает оболочка совместимости ValidationResult.ValidationResult()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimValidationResult.ExtraMessagesGet">
            <summary>Задает оболочка совместимости ValidationResult.get_ExtraMessages()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimValidationResult.IsValidGet">
            <summary>Задает оболочка совместимости ValidationResult.get_IsValid()</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimValidationResult.IsValidSetBoolean">
            <summary>Задает оболочка совместимости ValidationResult.set_IsValid(Boolean value)</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimValidationResult.MissingRulesGet">
            <summary>Задает оболочка совместимости ValidationResult.get_MissingRules()</summary>
        </member>
        <member name="T:Bogus.Fakes.ShimWordFunctions">
            <summary>Тип оболочки совместимости для Bogus.WordFunctions</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimWordFunctions.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimWordFunctions.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Bogus.Fakes.ShimWordFunctions.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimWordFunctions.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Bogus.Fakes.ShimWordFunctions.StaticConstructor">
            <summary>Задает оболочка совместимости WordFunctions.WordFunctions()</summary>
        </member>
        <member name="T:Bogus.Fakes.StubBinder">
            <summary>Тип заглушки Bogus.Binder</summary>
        </member>
        <member name="M:Bogus.Fakes.StubBinder.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Bogus.Fakes.StubBinder.#ctor(System.Reflection.BindingFlags)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.Fakes.StubBinder.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.Fakes.StubBinder.GetMembers(System.Type)">
            <summary>Задает заглушка Binder.GetMembers(Type t)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubBinder.GetMembersType">
            <summary>Задает stub Binder.GetMembers(Type t)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubBinder.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubBinder</summary>
        </member>
        <member name="P:Bogus.Fakes.StubBinder.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubBinder.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.Fakes.StubDataCategoryAttribute">
            <summary>Тип заглушки Bogus.DataCategoryAttribute</summary>
        </member>
        <member name="M:Bogus.Fakes.StubDataCategoryAttribute.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.Fakes.StubDataCategoryAttribute.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.Fakes.StubDataCategoryAttribute.Equals(System.Object)">
            <summary>Задает заглушка Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubDataCategoryAttribute.EqualsObject">
            <summary>Задает stub Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubDataCategoryAttribute.GetHashCode">
            <summary>Задает заглушка Attribute.GetHashCode()</summary>
        </member>
        <member name="F:Bogus.Fakes.StubDataCategoryAttribute.GetHashCode01">
            <summary>Задает stub Attribute.GetHashCode()</summary>
        </member>
        <member name="M:Bogus.Fakes.StubDataCategoryAttribute.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDataCategoryAttribute</summary>
        </member>
        <member name="P:Bogus.Fakes.StubDataCategoryAttribute.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubDataCategoryAttribute.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="M:Bogus.Fakes.StubDataCategoryAttribute.IsDefaultAttribute">
            <summary>Задает заглушка Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:Bogus.Fakes.StubDataCategoryAttribute.IsDefaultAttribute01">
            <summary>Задает stub Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:Bogus.Fakes.StubDataCategoryAttribute.Match(System.Object)">
            <summary>Задает заглушка Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubDataCategoryAttribute.MatchObject">
            <summary>Задает stub Attribute.Match(Object obj)</summary>
        </member>
        <member name="P:Bogus.Fakes.StubDataCategoryAttribute.TypeId">
            <summary>Задает stub Attribute.get_TypeId()</summary>
        </member>
        <member name="F:Bogus.Fakes.StubDataCategoryAttribute.TypeIdGet">
            <summary>Задает stub Attribute.get_TypeId()</summary>
        </member>
        <member name="T:Bogus.Fakes.StubDataSet">
            <summary>Тип заглушки Bogus.DataSet</summary>
        </member>
        <member name="M:Bogus.Fakes.StubDataSet.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.Fakes.StubDataSet.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.Fakes.StubDataSet.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDataSet</summary>
        </member>
        <member name="P:Bogus.Fakes.StubDataSet.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubDataSet.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.Fakes.StubFaker">
            <summary>Тип заглушки Bogus.Faker</summary>
        </member>
        <member name="M:Bogus.Fakes.StubFaker.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.Fakes.StubFaker.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.Fakes.StubFaker.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubFaker</summary>
        </member>
        <member name="P:Bogus.Fakes.StubFaker.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubFaker.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.Fakes.StubFinalizeAction`1">
            <summary>Тип заглушки Bogus.FinalizeAction`1</summary>
        </member>
        <member name="M:Bogus.Fakes.StubFinalizeAction`1.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.Fakes.StubFinalizeAction`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.Fakes.StubFinalizeAction`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubFinalizeAction</summary>
        </member>
        <member name="P:Bogus.Fakes.StubFinalizeAction`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubFinalizeAction`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.Fakes.StubHashids">
            <summary>Тип заглушки Bogus.Hashids</summary>
        </member>
        <member name="M:Bogus.Fakes.StubHashids.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Bogus.Fakes.StubHashids.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.Fakes.StubHashids.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.Fakes.StubHashids.Decode(System.String)">
            <summary>Задает заглушка Hashids.Decode(String hash)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubHashids.DecodeHex(System.String)">
            <summary>Задает заглушка Hashids.DecodeHex(String hash)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubHashids.DecodeHexString">
            <summary>Задает stub Hashids.DecodeHex(String hash)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubHashids.DecodeString">
            <summary>Задает stub Hashids.Decode(String hash)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubHashids.Decrypt(System.String)">
            <summary>Задает заглушка Hashids.Decrypt(String hash)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubHashids.DecryptHex(System.String)">
            <summary>Задает заглушка Hashids.DecryptHex(String hash)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubHashids.DecryptHexString">
            <summary>Задает stub Hashids.DecryptHex(String hash)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubHashids.DecryptString">
            <summary>Задает stub Hashids.Decrypt(String hash)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubHashids.Encode(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Задает заглушка Hashids.Encode(IEnumerable`1&lt;Int32&gt; numbers)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubHashids.Encode(System.Int32[])">
            <summary>Задает заглушка Hashids.Encode(Int32[] numbers)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubHashids.EncodeHex(System.String)">
            <summary>Задает заглушка Hashids.EncodeHex(String hex)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubHashids.EncodeHexString">
            <summary>Задает stub Hashids.EncodeHex(String hex)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubHashids.EncodeIEnumerableOfInt32">
            <summary>Задает stub Hashids.Encode(IEnumerable`1&lt;Int32&gt; numbers)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubHashids.EncodeInt32Array">
            <summary>Задает stub Hashids.Encode(Int32[] numbers)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubHashids.Encrypt(System.Int32[])">
            <summary>Задает заглушка Hashids.Encrypt(Int32[] numbers)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubHashids.EncryptHex(System.String)">
            <summary>Задает заглушка Hashids.EncryptHex(String hex)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubHashids.EncryptHexString">
            <summary>Задает stub Hashids.EncryptHex(String hex)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubHashids.EncryptInt32Array">
            <summary>Задает stub Hashids.Encrypt(Int32[] numbers)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubHashids.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubHashids</summary>
        </member>
        <member name="P:Bogus.Fakes.StubHashids.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubHashids.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.Fakes.StubIBinder">
            <summary>Тип заглушки Bogus.IBinder</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIBinder.#ctor">
            <summary>Инициализирует новый экземпляр type StubIBinder</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIBinder.Bogus#IBinder#GetMembers(System.Type)">
            <summary>Задает заглушка IBinder.GetMembers(Type t)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubIBinder.GetMembersType">
            <summary>Задает stub IBinder.GetMembers(Type t)</summary>
        </member>
        <member name="T:Bogus.Fakes.StubIHashids">
            <summary>Тип заглушки Bogus.IHashids</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIHashids.#ctor">
            <summary>Инициализирует новый экземпляр type StubIHashids</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIHashids.Bogus#IHashids#Decode(System.String)">
            <summary>Задает заглушка IHashids.Decode(String hash)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIHashids.Bogus#IHashids#DecodeHex(System.String)">
            <summary>Задает заглушка IHashids.DecodeHex(String hash)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIHashids.Bogus#IHashids#DecodeLong(System.String)">
            <summary>Задает заглушка IHashids.DecodeLong(String hash)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIHashids.Bogus#IHashids#Encode(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Задает заглушка IHashids.Encode(IEnumerable`1&lt;Int32&gt; numbers)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIHashids.Bogus#IHashids#Encode(System.Int32[])">
            <summary>Задает заглушка IHashids.Encode(Int32[] numbers)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIHashids.Bogus#IHashids#EncodeHex(System.String)">
            <summary>Задает заглушка IHashids.EncodeHex(String hex)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIHashids.Bogus#IHashids#EncodeLong(System.Int64[])">
            <summary>Задает заглушка IHashids.EncodeLong(Int64[] numbers)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIHashids.Bogus#IHashids#EncodeLong(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>Задает заглушка IHashids.EncodeLong(IEnumerable`1&lt;Int64&gt; numbers)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubIHashids.DecodeHexString">
            <summary>Задает stub IHashids.DecodeHex(String hash)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubIHashids.DecodeLongString">
            <summary>Задает stub IHashids.DecodeLong(String hash)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubIHashids.DecodeString">
            <summary>Задает stub IHashids.Decode(String hash)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubIHashids.EncodeHexString">
            <summary>Задает stub IHashids.EncodeHex(String hex)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubIHashids.EncodeIEnumerableOfInt32">
            <summary>Задает stub IHashids.Encode(IEnumerable`1&lt;Int32&gt; numbers)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubIHashids.EncodeInt32Array">
            <summary>Задает stub IHashids.Encode(Int32[] numbers)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubIHashids.EncodeLongIEnumerableOfInt64">
            <summary>Задает stub IHashids.EncodeLong(IEnumerable`1&lt;Int64&gt; numbers)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubIHashids.EncodeLongInt64Array">
            <summary>Задает stub IHashids.EncodeLong(Int64[] numbers)</summary>
        </member>
        <member name="T:Bogus.Fakes.StubILocaleAware">
            <summary>Тип заглушки Bogus.ILocaleAware</summary>
        </member>
        <member name="M:Bogus.Fakes.StubILocaleAware.#ctor">
            <summary>Инициализирует новый экземпляр type StubILocaleAware</summary>
        </member>
        <member name="M:Bogus.Fakes.StubILocaleAware.AttachBackingFieldToLocale">
            <summary>Присоединение делегатов для эмуляции StubILocaleAware.Locale как свойства с резервным полем.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubILocaleAware.Bogus#ILocaleAware#Locale">
            <summary>Задает stub ILocaleAware.get_Locale()</summary>
        </member>
        <member name="F:Bogus.Fakes.StubILocaleAware.LocaleGet">
            <summary>Задает stub ILocaleAware.get_Locale()</summary>
        </member>
        <member name="F:Bogus.Fakes.StubILocaleAware.LocaleSetString">
            <summary>Задает stub ILocaleAware.set_Locale(String value)</summary>
        </member>
        <member name="T:Bogus.Fakes.StubIRuleSet`1">
            <summary>Тип заглушки Bogus.IRuleSet`1</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIRuleSet`1.#ctor">
            <summary>Инициализирует новый экземпляр type StubIRuleSet</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIRuleSet`1.Bogus#IRuleSet{T}#CustomInstantiator(System.Func{Bogus.Faker,`0})">
            <summary>Задает заглушка IRuleSet`1.CustomInstantiator(Func`2&lt;Faker,!0&gt; factoryMethod)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIRuleSet`1.Bogus#IRuleSet{T}#FinishWith(System.Action{Bogus.Faker,`0})">
            <summary>Задает заглушка IRuleSet`1.FinishWith(Action`2&lt;Faker,!0&gt; action)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIRuleSet`1.Bogus#IRuleSet{T}#Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Задает заглушка IRuleSet`1.Ignore(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; propertyOrField)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIRuleSet`1.Bogus#IRuleSet{T}#RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>Задает заглушка IRuleSet`1.RuleFor(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; property, !!0 value)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIRuleSet`1.Bogus#IRuleSet{T}#RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0})">
            <summary>Задает заглушка IRuleSet`1.RuleFor(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; property, Func`1&lt;!!0&gt; valueFunction)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIRuleSet`1.Bogus#IRuleSet{T}#RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Bogus.Faker,``0})">
            <summary>Задает заглушка IRuleSet`1.RuleFor(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; property, Func`2&lt;Faker,!!0&gt; setter)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIRuleSet`1.Bogus#IRuleSet{T}#RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Bogus.Faker,`0,``0})">
            <summary>Задает заглушка IRuleSet`1.RuleFor(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; property, Func`3&lt;Faker,!0,!!0&gt; setter)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIRuleSet`1.Bogus#IRuleSet{T}#Rules(System.Action{Bogus.Faker,`0})">
            <summary>Задает заглушка IRuleSet`1.Rules(Action`2&lt;Faker,!0&gt; setActions)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIRuleSet`1.Bogus#IRuleSet{T}#StrictMode(System.Boolean)">
            <summary>Задает заглушка IRuleSet`1.StrictMode(Boolean ensureRulesForAllProperties)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubIRuleSet`1.CustomInstantiatorFuncOfFakerT0">
            <summary>Задает stub IRuleSet`1.CustomInstantiator(Func`2&lt;Faker,!0&gt; factoryMethod)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubIRuleSet`1.FinishWithActionOfFakerT0">
            <summary>Задает stub IRuleSet`1.FinishWith(Action`2&lt;Faker,!0&gt; action)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIRuleSet`1.IgnoreOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},Bogus.Faker{`0}})">
            <summary>Задает заглушки Ignore(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; propertyOrField)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIRuleSet`1.RuleForOf1ExpressionOfFuncOfT0M0FuncOfFakerM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Bogus.Faker,``0},Bogus.Faker{`0}})">
            <summary>Задает заглушки RuleFor(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; property, Func`2&lt;Faker,!!0&gt; setter)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIRuleSet`1.RuleForOf1ExpressionOfFuncOfT0M0FuncOfFakerT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Bogus.Faker,`0,``0},Bogus.Faker{`0}})">
            <summary>Задает заглушки RuleFor(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; property, Func`3&lt;Faker,!0,!!0&gt; setter)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIRuleSet`1.RuleForOf1ExpressionOfFuncOfT0M0FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0},Bogus.Faker{`0}})">
            <summary>Задает заглушки RuleFor(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; property, Func`1&lt;!!0&gt; valueFunction)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubIRuleSet`1.RuleForOf1ExpressionOfFuncOfT0M0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,Bogus.Faker{`0}})">
            <summary>Задает заглушки RuleFor(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; property, !!0 value)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubIRuleSet`1.RulesActionOfFakerT0">
            <summary>Задает stub IRuleSet`1.Rules(Action`2&lt;Faker,!0&gt; setActions)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubIRuleSet`1.StrictModeBoolean">
            <summary>Задает stub IRuleSet`1.StrictMode(Boolean ensureRulesForAllProperties)</summary>
        </member>
        <member name="T:Bogus.Fakes.StubMultiDictionary`3">
            <summary>Тип заглушки Bogus.MultiDictionary`3</summary>
        </member>
        <member name="M:Bogus.Fakes.StubMultiDictionary`3.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.Fakes.StubMultiDictionary`3.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.Fakes.StubMultiDictionary`3.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Задает заглушка Dictionary`2.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubMultiDictionary`3.GetObjectDataSerializationInfoStreamingContext">
            <summary>Задает stub Dictionary`2.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubMultiDictionary`3.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMultiDictionary</summary>
        </member>
        <member name="P:Bogus.Fakes.StubMultiDictionary`3.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubMultiDictionary`3.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="M:Bogus.Fakes.StubMultiDictionary`3.OnDeserialization(System.Object)">
            <summary>Задает заглушка Dictionary`2.OnDeserialization(Object sender)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubMultiDictionary`3.OnDeserializationObject">
            <summary>Задает stub Dictionary`2.OnDeserialization(Object sender)</summary>
        </member>
        <member name="T:Bogus.Fakes.StubMultiSetDictionary`2">
            <summary>Тип заглушки Bogus.MultiSetDictionary`2</summary>
        </member>
        <member name="M:Bogus.Fakes.StubMultiSetDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.Fakes.StubMultiSetDictionary`2.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.Fakes.StubMultiSetDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Задает заглушка Dictionary`2.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubMultiSetDictionary`2.GetObjectDataSerializationInfoStreamingContext">
            <summary>Задает stub Dictionary`2.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubMultiSetDictionary`2.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMultiSetDictionary</summary>
        </member>
        <member name="P:Bogus.Fakes.StubMultiSetDictionary`2.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubMultiSetDictionary`2.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="M:Bogus.Fakes.StubMultiSetDictionary`2.OnDeserialization(System.Object)">
            <summary>Задает заглушка Dictionary`2.OnDeserialization(Object sender)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubMultiSetDictionary`2.OnDeserializationObject">
            <summary>Задает stub Dictionary`2.OnDeserialization(Object sender)</summary>
        </member>
        <member name="T:Bogus.Fakes.StubMustashMethod">
            <summary>Тип заглушки Bogus.MustashMethod</summary>
        </member>
        <member name="M:Bogus.Fakes.StubMustashMethod.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.Fakes.StubMustashMethod.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.Fakes.StubMustashMethod.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMustashMethod</summary>
        </member>
        <member name="P:Bogus.Fakes.StubMustashMethod.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubMustashMethod.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.Fakes.StubPerson">
            <summary>Тип заглушки Bogus.Person</summary>
        </member>
        <member name="M:Bogus.Fakes.StubPerson.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.Fakes.StubPerson.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.Fakes.StubPerson.Initialize(System.String)">
            <summary>Задает заглушка Person.Initialize(String locale)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubPerson.InitializeString">
            <summary>Задает stub Person.Initialize(String locale)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubPerson.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubPerson</summary>
        </member>
        <member name="P:Bogus.Fakes.StubPerson.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubPerson.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.Fakes.StubPopulateAction`1">
            <summary>Тип заглушки Bogus.PopulateAction`1</summary>
        </member>
        <member name="M:Bogus.Fakes.StubPopulateAction`1.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.Fakes.StubPopulateAction`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.Fakes.StubPopulateAction`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubPopulateAction</summary>
        </member>
        <member name="P:Bogus.Fakes.StubPopulateAction`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubPopulateAction`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.Fakes.StubRandomizer">
            <summary>Тип заглушки Bogus.Randomizer</summary>
        </member>
        <member name="M:Bogus.Fakes.StubRandomizer.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.Fakes.StubRandomizer.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.Fakes.StubRandomizer.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubRandomizer</summary>
        </member>
        <member name="P:Bogus.Fakes.StubRandomizer.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubRandomizer.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.Fakes.StubRule`1">
            <summary>Тип заглушки Bogus.Rule`1</summary>
        </member>
        <member name="M:Bogus.Fakes.StubRule`1.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.Fakes.StubRule`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.Fakes.StubRule`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubRule</summary>
        </member>
        <member name="P:Bogus.Fakes.StubRule`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubRule`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.Fakes.StubTokenizer">
            <summary>Тип заглушки Bogus.Tokenizer</summary>
        </member>
        <member name="M:Bogus.Fakes.StubTokenizer.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.Fakes.StubTokenizer.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.Fakes.StubTokenizer.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubTokenizer</summary>
        </member>
        <member name="P:Bogus.Fakes.StubTokenizer.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubTokenizer.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Bogus.Fakes.StubValidationException">
            <summary>Тип заглушки Bogus.ValidationException</summary>
        </member>
        <member name="M:Bogus.Fakes.StubValidationException.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Bogus.Fakes.StubValidationException.AttachBackingFieldToHelpLink">
            <summary>Присоединение делегатов для эмуляции StubValidationException.HelpLink как свойства с резервным полем.</summary>
        </member>
        <member name="M:Bogus.Fakes.StubValidationException.AttachBackingFieldToSource">
            <summary>Присоединение делегатов для эмуляции StubValidationException.Source как свойства с резервным полем.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubValidationException.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Bogus.Fakes.StubValidationException.Data">
            <summary>Задает stub Exception.get_Data()</summary>
        </member>
        <member name="F:Bogus.Fakes.StubValidationException.DataGet">
            <summary>Задает stub Exception.get_Data()</summary>
        </member>
        <member name="M:Bogus.Fakes.StubValidationException.GetBaseException">
            <summary>Задает заглушка Exception.GetBaseException()</summary>
        </member>
        <member name="F:Bogus.Fakes.StubValidationException.GetBaseException01">
            <summary>Задает stub Exception.GetBaseException()</summary>
        </member>
        <member name="M:Bogus.Fakes.StubValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Задает заглушка Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Bogus.Fakes.StubValidationException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Задает stub Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Bogus.Fakes.StubValidationException.HelpLink">
            <summary>Задает stub Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Bogus.Fakes.StubValidationException.HelpLinkGet">
            <summary>Задает stub Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Bogus.Fakes.StubValidationException.HelpLinkSetString">
            <summary>Задает stub Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Bogus.Fakes.StubValidationException.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubValidationException</summary>
        </member>
        <member name="P:Bogus.Fakes.StubValidationException.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubValidationException.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubValidationException.Message">
            <summary>Задает stub Exception.get_Message()</summary>
        </member>
        <member name="F:Bogus.Fakes.StubValidationException.MessageGet">
            <summary>Задает stub Exception.get_Message()</summary>
        </member>
        <member name="P:Bogus.Fakes.StubValidationException.Source">
            <summary>Задает stub Exception.get_Source()</summary>
        </member>
        <member name="F:Bogus.Fakes.StubValidationException.SourceGet">
            <summary>Задает stub Exception.get_Source()</summary>
        </member>
        <member name="F:Bogus.Fakes.StubValidationException.SourceSetString">
            <summary>Задает stub Exception.set_Source(String value)</summary>
        </member>
        <member name="P:Bogus.Fakes.StubValidationException.StackTrace">
            <summary>Задает stub Exception.get_StackTrace()</summary>
        </member>
        <member name="F:Bogus.Fakes.StubValidationException.StackTraceGet">
            <summary>Задает stub Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Bogus.Fakes.StubValidationException.ToString">
            <summary>Задает заглушка Exception.ToString()</summary>
        </member>
        <member name="F:Bogus.Fakes.StubValidationException.ToString01">
            <summary>Задает stub Exception.ToString()</summary>
        </member>
        <member name="T:Bogus.Fakes.StubValidationResult">
            <summary>Тип заглушки Bogus.ValidationResult</summary>
        </member>
        <member name="M:Bogus.Fakes.StubValidationResult.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:Bogus.Fakes.StubValidationResult.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:Bogus.Fakes.StubValidationResult.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubValidationResult</summary>
        </member>
        <member name="P:Bogus.Fakes.StubValidationResult.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Bogus.Fakes.StubValidationResult.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
    </members>
</doc>
